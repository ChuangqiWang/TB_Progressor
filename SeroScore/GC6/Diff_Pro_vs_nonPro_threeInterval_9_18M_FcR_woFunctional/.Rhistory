ggsave("Features_Freq_woRisk6.png", width = 12, height = 4, dpi = 300)
meta_colors <- list(
"group" = c(
"NA" = "gray",
"progressor" = "#AD07E3",
"non-progressor" = "#238b45"
)
)
library(DMwR2)
#Data a folder to save the results.
output_dir <- 'Progressor_9_18months'
Data_group <- readRDS(file.path(output_dir, "Data_group.RDS"))
Data_group <- factor(Data_group, levels = c("non-progressor", "progressor"))
Data_combining <- readRDS(file.path(output_dir, "Data_combining.RDS"))
Data_combining <- scale(Data_combining, center = TRUE, scale = TRUE)
library(dplyr)
folder <- './Classification_RF_LASSO_woRisk6'
data.df <- readRDS(file.path(folder, "Features_Freq_woRisk6.RDS"))
temp.df <- top_n(data.df, 12, Freq)
interested.features <- as.character(temp.df$FeatureName)
# interested.features <- c("FcgR3B_PPD", "IgG1_LAM", "FcgR2A_PPD", "IgG4_Ag85",
#                          "IgG2_LAM", "IgA1_PPD", "IgG4_Hspx", "FcgR2B_PPD",
#                          "IgM_ESAT6", "FcgR3A_PPD","IgG1_PPD", "IgG3_PPD" )
Data_combining_selected <- Data_combining[, interested.features]
y = Data_group
y = gsub("non-progressor", 0, y)
y = gsub("progressor", 1, y)
data.df <- data.frame(y, Data_combining_selected)
#Create a folder to save the results.
saved.dir <- './SeroScore_FcR_Lasso'
if (!dir.exists(saved.dir)){
dir.create((saved.dir))
}
FcR <- interested.features[1:12]
n <- length(FcR)
l <- rep(list(0:1), n)
FcR.index <- expand.grid(l)
FcR.index <- FcR.index[-1, ]
FcR.Data <- Data_combining_selected[, FcR]
colnames(FcR.Data) <- FcR
saveRDS(FcR.Data, file.path(saved.dir, "FcR.Data.RDS"))
# Negative <- interested.features[13:16]
#
# n <- length(Negative)
# l <- rep(list(0:1), n)
#
# Neg.index <- expand.grid(l)
# Neg.index <- Neg.index[-1, ]
# Neg.Data <- Data_combining_selected[, Negative]
# colnames(Neg.Data) <- Negative
# saveRDS(Neg.Data, file.path(saved.dir, "Neg.Data.RDS"))
seroScore <- data.frame(matrix(NA, nrow = dim(Data_combining)[1], ncol = dim(FcR.index)[1]))
curr.index <- 1
for(index.p in 1 : dim(FcR.index)[1]){
#for(index.n in 1 : dim(Neg.index)[1]){
#For positive parts.
temp.FcR.index <- FcR.index[index.p, ]
temp.FcR.index <- which(temp.FcR.index == 1)
if(length(temp.FcR.index) > 1){
Temp.pos <- rowSums(FcR.Data[, temp.FcR.index]) #Sum each rows.
}else{
Temp.pos <- FcR.Data[, temp.FcR.index]
}
#Calculate the difference.
Temp.value <- Temp.pos
seroScore[, curr.index] <- Temp.value
curr.index <- curr.index + 1
#}
}
saveRDS(seroScore, file.path(saved.dir, 'SeroScore.RDS'))
write.csv(seroScore, file.path(saved.dir, "SeroScore.csv"))
View(Data_combining)
library(dplyr)
folder <- './Classification_RF_LASSO_woRisk6'
data.df <- readRDS(file.path(folder, "Features_Freq_woRisk6.RDS"))
temp.df <- top_n(data.df, 12, Freq)
interested.features <- as.character(temp.df$FeatureName)
FcR <- interested.features[1:12]
n <- length(FcR)
l <- rep(list(0:1), n)
FcR.index <- expand.grid(l)
FcR.index <- FcR.index[-1, ]
FcR
FcR
meta_colors <- list(
"group" = c(
"progressor" = "#AD07E3",
"non-progressor" = "#238b45"
),
"group1" = c(
"progressor" = "#AD07E3",
"non-progressor" = "#238b45"
)
)
set.seed(1986)
library(RColorBrewer)
library(viridis)
quantile_breaks <- function(xs, n = 10) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
folder <- "../2021-10-25-Extract_Dataset_9-18M"
Progressor <- readRDS(file.path(paste0(folder, "/Progressor_9_18months_v2"), "logscale.TB.Progressor.RDS"))
NonProgressor <- readRDS(file.path(paste0(folder, "/nonprogressors"), "nonprogressor.Data.RDS"))
nonProgressor.metadata <- readRDS(file.path(paste0(folder, "/nonprogressors"), "nonprogressor.meta.RDS"))
#NonProgressor.Avg <- readRDS(file.path(paste0(folder, "/nonprogressors"), "nonprogressor.Avg.RDS"))
nonProgressor.metadata.Avg <- readRDS(file.path(paste0(folder, "/nonprogressors"), "nonprogressor.meta.Avg.RDS"))
Syssero.Name <- colnames(NonProgressor)
all(colnames(Progressor) == colnames(NonProgressor))
## Provide the dir name(i.e sub dir) that you want to create under main dir:
output_dir <- 'Progressor_9_18months'
if (!dir.exists(output_dir)){
dir.create(output_dir)
}
NonProgressor.selected.index <- c()
for(index in 1 : dim(nonProgressor.metadata.Avg)[1]){
temp.ID <- as.character(nonProgressor.metadata.Avg[index, ]$ID)
rows.index <- which(as.character(nonProgressor.metadata$ID) == temp.ID)
selected.idx <- sample(rows.index,1)
NonProgressor.selected.index <- c(NonProgressor.selected.index, selected.idx)
}
NonProgressor.selected <- NonProgressor[NonProgressor.selected.index, ]
#
# temp.index <- which(apply(NonProgressor.selected, 1, function(x) all(is.na(x))))
# NonProgressor.selected <- NonProgressor.selected[-temp.index, ]
all(colnames(NonProgressor.selected) == colnames(Progressor))
Data_combining <- rbind(Progressor, NonProgressor.selected)
Data_group <- c(rep("progressor", dim(Progressor)[1]), rep("non-progressor", dim(NonProgressor.selected)[1]))
# temp.index <- which(apply(Data_combining, 1, function(x) any(is.na(x))))
# Data_group <- Data_group[-temp.index]
# Data_combining <- Data_combining[-temp.index, ]
saveRDS(Data_group, file.path(output_dir, "Data_group.RDS"))
saveRDS(Data_combining, file.path(output_dir, "Data_combining.RDS"))
write.csv(Data_group, file.path(output_dir, "Data_group.csv"))
write.csv(Data_combining, file.path(output_dir, "Data_combining.csv"))
library(pheatmap)
annotation_row <- data.frame(group1 = Data_group, group = Data_group)
rownames(annotation_row) <- rownames(Data_combining)
ordered_index <- order(annotation_row$group, annotation_row$group1)
annotation_row_ordered <- annotation_row[ordered_index, ]
data.sero.ordered <- scale(Data_combining[ordered_index, ], center = TRUE, scale = TRUE)
mat_breaks <- quantile_breaks(na.omit(unlist(data.sero.ordered)), n = 100)
png(file.path(output_dir, "heatmap.scaled.png"), width=3560, height=1940, res = 300)
pheatmap(
mat = data.sero.ordered,
border_color = NA,
color = colorRampPalette(rev(brewer.pal(n = 8, name = "RdYlBu")))(length(mat_breaks) - 1),
#color = inferno(length(mat_breaks) - 1),
breaks = mat_breaks,
show_rownames = FALSE,
show_colnames = TRUE,
cluster_rows = FALSE,
cluster_cols = TRUE,
annotation_row = annotation_row_ordered,
annotation_colors = meta_colors,
fontsize = 6,
fontsize_col = 5,
fontsize_row = 5,
scale = "none",
main  = "Serology Data with Quantile Color Scale"
)
dev.off()
meta_colors <- list(
"group" = c(
"NA" = "gray",
"progressor" = "#AD07E3",
"non-progressor" = "#238b45"
)
)
library(DMwR2)
#Data a folder to save the results.
output_dir <- 'Progressor_9_18months'
Data_group <- readRDS(file.path(output_dir, "Data_group.RDS"))
Data_group <- factor(Data_group, levels = c("non-progressor", "progressor"))
Data_combining <- readRDS(file.path(output_dir, "Data_combining.RDS"))
Data_combining <- scale(Data_combining, center = TRUE, scale = TRUE)
library(dplyr)
# folder <- './Classification_RF_LASSO_woRisk6'
# data.df <- readRDS(file.path(folder, "Features_Freq_woRisk6.RDS"))
#
# temp.df <- top_n(data.df, 12, Freq)
# interested.features <- as.character(temp.df$FeatureName)
interested.features <- c("IgG_LAM", "IgG_ESAT6", "IgG2_PPD",  "IgG3_CFP10", "IgG3_ESAT6",
"IgA1_PPD", "IgA1_HspX", "IgM_Ag85")
Data_combining_selected <- Data_combining[, interested.features]
y = Data_group
y = gsub("non-progressor", 0, y)
y = gsub("progressor", 1, y)
data.df <- data.frame(y, Data_combining_selected)
#Create a folder to save the results.
saved.dir <- './SeroScore_FcR_Lasso'
if (!dir.exists(saved.dir)){
dir.create((saved.dir))
}
FcR <- interested.features
n <- length(FcR)
l <- rep(list(0:1), n)
FcR.index <- expand.grid(l)
FcR.index <- FcR.index[2^8, ]
FcR.Data <- Data_combining_selected[, FcR]
colnames(FcR.Data) <- FcR
saveRDS(FcR.Data, file.path(saved.dir, "FcR.Data.RDS"))
# Negative <- interested.features[13:16]
#
# n <- length(Negative)
# l <- rep(list(0:1), n)
#
# Neg.index <- expand.grid(l)
# Neg.index <- Neg.index[-1, ]
# Neg.Data <- Data_combining_selected[, Negative]
# colnames(Neg.Data) <- Negative
# saveRDS(Neg.Data, file.path(saved.dir, "Neg.Data.RDS"))
seroScore <- data.frame(matrix(NA, nrow = dim(Data_combining)[1], ncol = dim(FcR.index)[1]))
curr.index <- 1
for(index.p in 1 : dim(FcR.index)[1]){
#for(index.n in 1 : dim(Neg.index)[1]){
#For positive parts.
temp.FcR.index <- FcR.index[index.p, ]
temp.FcR.index <- which(temp.FcR.index == 1)
if(length(temp.FcR.index) > 1){
Temp.pos <- rowSums(FcR.Data[, temp.FcR.index]) #Sum each rows.
}else{
Temp.pos <- FcR.Data[, temp.FcR.index]
}
#Calculate the difference.
Temp.value <- Temp.pos
seroScore[, curr.index] <- Temp.value
curr.index <- curr.index + 1
#}
}
colnames(seroScore) <- "UnifiedScore"
saveRDS(seroScore, file.path(saved.dir, 'SeroScore.RDS'))
write.csv(seroScore, file.path(saved.dir, "SeroScore.csv"))
meta_colors <- list(
"group" = c(
"NA" = "gray",
"progressor" = "#AD07E3",
"non-progressor" = "#238b45"
)
)
library(DMwR2)
#Data a folder to save the results.
output_dir <- 'Progressor_9_18months'
Data_group <- readRDS(file.path(output_dir, "Data_group.RDS"))
Data_group <- factor(Data_group, levels = c("non-progressor", "progressor"))
Data_combining <- readRDS(file.path(output_dir, "Data_combining.RDS"))
Data_combining <- scale(Data_combining, center = TRUE, scale = TRUE)
interested.features <- c("IgG_LAM", "IgG_ESAT6", "IgG2_PPD",  "IgG3_CFP10", "IgG3_ESAT6",
"IgA1_PPD", "IgA1_HspX", "IgM_Ag85", "Risk6")
Data_combining_selected <- Data_combining[, interested.features]
y = Data_group
y = gsub("non-progressor", 0, y)
y = gsub("progressor", 1, y)
data.df <- data.frame(y, Data_combining_selected)
#Create a folder to save the results.
saved.dir <- './SeroScore_FcR_Lasso_wRisk6'
if (!dir.exists(saved.dir)){
dir.create((saved.dir))
}
FcR <- interested.features
n <- length(FcR)
l <- rep(list(0:1), n)
FcR.index <- expand.grid(l)
FcR.index <- FcR.index[2^9, ]
FcR.Data <- Data_combining_selected[, FcR]
colnames(FcR.Data) <- FcR
saveRDS(FcR.Data, file.path(saved.dir, "FcR.Data.RDS"))
# Negative <- interested.features[13:16]
#
# n <- length(Negative)
# l <- rep(list(0:1), n)
#
# Neg.index <- expand.grid(l)
# Neg.index <- Neg.index[-1, ]
# Neg.Data <- Data_combining_selected[, Negative]
# colnames(Neg.Data) <- Negative
# saveRDS(Neg.Data, file.path(saved.dir, "Neg.Data.RDS"))
seroScore <- data.frame(matrix(NA, nrow = dim(Data_combining)[1], ncol = dim(FcR.index)[1]))
curr.index <- 1
for(index.p in 1 : dim(FcR.index)[1]){
#for(index.n in 1 : dim(Neg.index)[1]){
#For positive parts.
temp.FcR.index <- FcR.index[index.p, ]
temp.FcR.index <- which(temp.FcR.index == 1)
if(length(temp.FcR.index) > 1){
Temp.pos <- rowSums(FcR.Data[, temp.FcR.index]) #Sum each rows.
}else{
Temp.pos <- FcR.Data[, temp.FcR.index]
}
#Calculate the difference.
Temp.value <- Temp.pos
seroScore[, curr.index] <- Temp.value
curr.index <- curr.index + 1
#}
}
colnames(seroScore) <- "UnifiedScore"
saveRDS(seroScore, file.path(saved.dir, 'SeroScore.RDS'))
write.csv(seroScore, file.path(saved.dir, "SeroScore.csv"))
meta_colors <- list(
"group" = c(
"progressor" = "#AD07E3",
"non-progressor" = "#238b45"
),
"group1" = c(
"progressor" = "#AD07E3",
"non-progressor" = "#238b45"
)
)
set.seed(1986)
library(RColorBrewer)
library(viridis)
quantile_breaks <- function(xs, n = 10) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
folder <- "../2021-10-25-Extract_Dataset_9-18M"
Progressor <- readRDS(file.path(paste0(folder, "/Progressor_9_18months_v2"), "logscale.TB.Progressor.RDS"))
Progressor.metadata <- readRDS(file.path(paste0(folder, "/Progressor_9_18months_v2"), "meta.data.Progressor.RDS"))
NonProgressor <- readRDS(file.path(paste0(folder, "/nonprogressors"), "nonprogressor.Data.RDS"))
nonProgressor.metadata <- readRDS(file.path(paste0(folder, "/nonprogressors"), "nonprogressor.meta.RDS"))
#NonProgressor.Avg <- readRDS(file.path(paste0(folder, "/nonprogressors"), "nonprogressor.Avg.RDS"))
nonProgressor.metadata.Avg <- readRDS(file.path(paste0(folder, "/nonprogressors"), "nonprogressor.meta.Avg.RDS"))
Syssero.Name <- colnames(NonProgressor)
all(colnames(Progressor) == colnames(NonProgressor))
## Provide the dir name(i.e sub dir) that you want to create under main dir:
output_dir <- 'Progressor_9_18months_Test'
if (!dir.exists(output_dir)){
dir.create(output_dir)
}
NonProgressor.selected.index <- c()
for(index in 1 : dim(nonProgressor.metadata.Avg)[1]){
temp.ID <- as.character(nonProgressor.metadata.Avg[index, ]$ID)
rows.index <- which(as.character(nonProgressor.metadata$ID) == temp.ID)
selected.idx <- sample(rows.index,1)
NonProgressor.selected.index <- c(NonProgressor.selected.index, selected.idx)
}
NonProgressor.selected <- NonProgressor[NonProgressor.selected.index, ]
#
# temp.index <- which(apply(NonProgressor.selected, 1, function(x) all(is.na(x))))
# NonProgressor.selected <- NonProgressor.selected[-temp.index, ]
all(colnames(NonProgressor.selected) == colnames(Progressor))
Data_combining <- rbind(Progressor, NonProgressor.selected)
Data_group <- c(rep("progressor", dim(Progressor)[1]), rep("non-progressor", dim(NonProgressor.selected)[1]))
Data_metainfo <- rbind(Progressor.metadata, nonProgressor.metadata.Avg)
Data_metainfo$Data_group <- factor(Data_group, levels = c("non-progressor", "progressor"))
Sex_cat <- Data_metainfo$sex
write.csv(Sex_cat, file.path(output_dir, "Sex_cat.csv"))
Age_cat <- as.numeric(Data_metainfo$Age > 20)
write.csv(Age_cat, file.path(output_dir, "Age_cat_threshold_20.csv"))
Age_cat <- as.numeric(Data_metainfo$Age <= 20 & Data_metainfo$Age > 5)
write.csv(Age_cat, file.path(output_dir, "Age_cat_threshold_Adolescent.csv"))
library(ggplot2)
library(ggridges)
ggplot(Data_metainfo, aes(x=Age, fill=Data_group)) +
geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity', binwidth = 2) +
scale_fill_manual(values=meta_colors$group) +
geom_vline(xintercept = 34, linetype="dotted", color = "black", size=1.5) +
theme_classic() +
labs(fill="")
ggplot(Data_metainfo, aes(x=Age, y = Data_group, fill=Data_group)) +
geom_density_ridges() +
scale_fill_manual(values=meta_colors$group) +
geom_vline(xintercept = 34, linetype="dotted", color = "black", size=1.5) +
theme_ridges() +
theme(legend.position = "none")
# temp.index <- which(apply(Data_combining, 1, function(x) any(is.na(x))))
# Data_group <- Data_group[-temp.index]
# Data_combining <- Data_combining[-temp.index, ]
saveRDS(Data_group, file.path(output_dir, "Data_group.RDS"))
saveRDS(Data_combining, file.path(output_dir, "Data_combining.RDS"))
write.csv(Data_group, file.path(output_dir, "Data_group.csv"))
write.csv(Data_combining, file.path(output_dir, "Data_combining.csv"))
meta_colors <- list(
"group" = c(
"progressor" = "#fe9300",
"non-progressor" = "#009093"
),
"group1" = c(
"progressor" = "#fe9300",
"non-progressor" = "#009093"
)
)
library(ggplot2)
library(ggridges)
ggplot(Data_metainfo, aes(x=Age, fill=Data_group)) +
geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity', binwidth = 2) +
scale_fill_manual(values=meta_colors$group) +
geom_vline(xintercept = 34, linetype="dotted", color = "black", size=1.5) +
theme_classic() +
labs(fill="")
ggplot(Data_metainfo, aes(x=Age, y = Data_group, fill=Data_group)) +
geom_density_ridges() +
scale_fill_manual(values=meta_colors$group) +
geom_vline(xintercept = 34, linetype="dotted", color = "black", size=1.5) +
theme_ridges() +
theme(legend.position = "none")
meta_colors <- list(
"group" = c(
"progressor" = "#fe9300",
"non-progressor" = "#009093"
),
"group1" = c(
"progressor" = "#fe9300",
"non-progressor" = "#009093"
)
)
set.seed(1986)
library(RColorBrewer)
library(viridis)
quantile_breaks <- function(xs, n = 10) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
folder <- "../2021-10-25-Extract_Dataset_9-18M"
Progressor <- readRDS(file.path(paste0(folder, "/Progressor_9_18months_v2"), "logscale.TB.Progressor.RDS"))
Progressor.metadata <- readRDS(file.path(paste0(folder, "/Progressor_9_18months_v2"), "meta.data.Progressor.RDS"))
NonProgressor <- readRDS(file.path(paste0(folder, "/nonprogressors"), "nonprogressor.Data.RDS"))
nonProgressor.metadata <- readRDS(file.path(paste0(folder, "/nonprogressors"), "nonprogressor.meta.RDS"))
#NonProgressor.Avg <- readRDS(file.path(paste0(folder, "/nonprogressors"), "nonprogressor.Avg.RDS"))
nonProgressor.metadata.Avg <- readRDS(file.path(paste0(folder, "/nonprogressors"), "nonprogressor.meta.Avg.RDS"))
Syssero.Name <- colnames(NonProgressor)
all(colnames(Progressor) == colnames(NonProgressor))
## Provide the dir name(i.e sub dir) that you want to create under main dir:
output_dir <- 'Progressor_9_18months_NewAge'
if (!dir.exists(output_dir)){
dir.create(output_dir)
}
NonProgressor.selected.index <- c()
for(index in 1 : dim(nonProgressor.metadata.Avg)[1]){
temp.ID <- as.character(nonProgressor.metadata.Avg[index, ]$ID)
rows.index <- which(as.character(nonProgressor.metadata$ID) == temp.ID)
selected.idx <- sample(rows.index,1)
NonProgressor.selected.index <- c(NonProgressor.selected.index, selected.idx)
}
NonProgressor.selected <- NonProgressor[NonProgressor.selected.index, ]
#
# temp.index <- which(apply(NonProgressor.selected, 1, function(x) all(is.na(x))))
# NonProgressor.selected <- NonProgressor.selected[-temp.index, ]
all(colnames(NonProgressor.selected) == colnames(Progressor))
Data_combining <- rbind(Progressor, NonProgressor.selected)
Data_group <- c(rep("progressor", dim(Progressor)[1]), rep("non-progressor", dim(NonProgressor.selected)[1]))
Data_metainfo <- rbind(Progressor.metadata, nonProgressor.metadata.Avg)
Data_metainfo$Data_group <- factor(Data_group, levels = c("non-progressor", "progressor"))
Age_file <- '../GC6_metadata.csv'
Age.meta <- read.csv(Age_file)
Data_metainfo$ID.numeric <- as.numeric(as.character(Data_metainfo$ID))
Matched.index <- c()
for(index in 1 : nrow(Data_metainfo)){
temp.index <- which(Data_metainfo[index, ]$ID.numeric == Age.meta$sample.ID)
if(length(temp.index) == 1){
Matched.index <- c(Matched.index, temp.index)
}else{
print("Wrong")
}
}
Data_metainfo <- cbind(Data_metainfo, Age.meta[Matched.index, c(4, 7, 8)])
Sex_cat <- Data_metainfo$sex
write.csv(Sex_cat, file.path(output_dir, "Sex_cat.csv"))
Age_cat <- as.numeric(Data_metainfo$age > 20)
write.csv(Age_cat, file.path(output_dir, "Age_cat_threshold_20.csv"))
Age_cat <- as.numeric(Data_metainfo$age <= 20)
write.csv(Age_cat, file.path(output_dir, "Age_cat_threshold_Adolescent.csv"))
library(ggplot2)
library(ggridges)
ggplot(Data_metainfo, aes(x=Age, fill=Data_group)) +
geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity', binwidth = 2) +
scale_fill_manual(values=meta_colors$group) +
geom_vline(xintercept = 34, linetype="dotted", color = "black", size=1.5) +
theme_classic() +
labs(fill="")
ggplot(Data_metainfo, aes(x=Age, y = Data_group, fill=Data_group)) +
geom_density_ridges() +
scale_fill_manual(values=meta_colors$group) +
geom_vline(xintercept = 34, linetype="dotted", color = "black", size=1.5) +
theme_ridges() +
theme(legend.position = "none")
# temp.index <- which(apply(Data_combining, 1, function(x) any(is.na(x))))
# Data_group <- Data_group[-temp.index]
# Data_combining <- Data_combining[-temp.index, ]
saveRDS(Data_group, file.path(output_dir, "Data_group.RDS"))
saveRDS(Data_combining, file.path(output_dir, "Data_combining.RDS"))
saveRDS(Data_metainfo, file.path(output_dir, "Data_metainfo.RDS"))
write.csv(Data_group, file.path(output_dir, "Data_group.csv"))
write.csv(Data_combining, file.path(output_dir, "Data_combining.csv"))
write.csv(Data_metainfo, file.path(output_dir, "Data_metainfo.csv"))
library(pheatmap)
annotation_row <- data.frame(group1 = Data_group, group = Data_group)
rownames(annotation_row) <- rownames(Data_combining)
ordered_index <- order(annotation_row$group, annotation_row$group1)
annotation_row_ordered <- annotation_row[ordered_index, ]
data.sero.ordered <- scale(Data_combining[ordered_index, ], center = TRUE, scale = TRUE)
mat_breaks <- quantile_breaks(na.omit(unlist(data.sero.ordered)), n = 100)
png(file.path(output_dir, "heatmap.scaled.png"), width=3560, height=1940, res = 300)
pheatmap(
mat = data.sero.ordered,
border_color = NA,
color = colorRampPalette(rev(brewer.pal(n = 8, name = "RdYlBu")))(length(mat_breaks) - 1),
#color = inferno(length(mat_breaks) - 1),
breaks = mat_breaks,
show_rownames = FALSE,
show_colnames = TRUE,
cluster_rows = FALSE,
cluster_cols = TRUE,
annotation_row = annotation_row_ordered,
annotation_colors = meta_colors,
fontsize = 6,
fontsize_col = 5,
fontsize_row = 5,
scale = "none",
main  = "Serology Data with Quantile Color Scale"
)
dev.off()
