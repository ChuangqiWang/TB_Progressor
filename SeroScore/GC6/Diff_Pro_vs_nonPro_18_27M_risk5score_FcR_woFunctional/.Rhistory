#
# temp.index <- which(apply(NonProgressor.selected, 1, function(x) all(is.na(x))))
# NonProgressor.selected <- NonProgressor.selected[-temp.index, ]
all(colnames(NonProgressor.selected) == colnames(Progressor))
Data_combining <- rbind(Progressor, NonProgressor.selected)
Data_group <- c(rep("progressor", dim(Progressor)[1]), rep("non-progressor", dim(NonProgressor.selected)[1]))
# temp.index <- which(apply(Data_combining, 1, function(x) any(is.na(x))))
# Data_group <- Data_group[-temp.index]
# Data_combining <- Data_combining[-temp.index, ]
saveRDS(Data_group, file.path(output_dir, "Data_group.RDS"))
saveRDS(Data_combining, file.path(output_dir, "Data_combining.RDS"))
write.csv(Data_group, file.path(output_dir, "Data_group.csv"))
write.csv(Data_combining, file.path(output_dir, "Data_combining.csv"))
library(pheatmap)
annotation_row <- data.frame(group1 = Data_group, group = Data_group)
rownames(annotation_row) <- rownames(Data_combining)
ordered_index <- order(annotation_row$group, annotation_row$group1)
annotation_row_ordered <- annotation_row[ordered_index, ]
data.sero.ordered <- scale(Data_combining[ordered_index, ], center = TRUE, scale = TRUE)
mat_breaks <- quantile_breaks(na.omit(unlist(data.sero.ordered)), n = 100)
png(file.path(output_dir, "heatmap.scaled.png"), width=3560, height=1940, res = 300)
pheatmap(
mat = data.sero.ordered,
border_color = NA,
color = colorRampPalette(rev(brewer.pal(n = 8, name = "RdYlBu")))(length(mat_breaks) - 1),
#color = inferno(length(mat_breaks) - 1),
breaks = mat_breaks,
show_rownames = FALSE,
show_colnames = TRUE,
cluster_rows = FALSE,
cluster_cols = TRUE,
annotation_row = annotation_row_ordered,
annotation_colors = meta_colors,
fontsize = 6,
fontsize_col = 5,
fontsize_row = 5,
scale = "none",
main  = "Serology Data with Quantile Color Scale"
)
dev.off()
meta_colors <- list(
"group" = c(
"NA" = "gray",
"progressor" = "#AD07E3",
"non-progressor" = "#238b45"
)
)
library(DMwR2)
#Data a folder to save the results.
output_dir <- 'Progressor_18_27months'
Data_group <- readRDS(file.path(output_dir, "Data_group.RDS"))
Data_group <- factor(Data_group, levels = c("non-progressor", "progressor"))
Data_combining <- readRDS(file.path(output_dir, "Data_combining.RDS"))
Data_combining_scale <- Data_combining
#Z-score the data to bring the parameters to the same scale.
#Data_combining_scale <- scale(knnImputation(Data_combining), center = TRUE, scale = TRUE)
#colnames(Data_combining_scale) <- colnames(Data_combining)
#rownames(Data_combining_scale) <- rownames(Data_combining)
#Create a folder to save the results.
saved.dir <- './Classification_RF_LASSO'
if (!dir.exists(saved.dir)){
dir.create((saved.dir))
}
y = Data_group
y = gsub("non-progressor", "NO", y)
y = gsub("progressor", "YES", y)
data.df <- data.frame(y = factor(y), x = Data_combining_scale) #[, selected_features]) 15
library(caret)
library(systemsseRology)
for(index in 1 : 100){
set.seed(index + 1986)
#####################1. Split the data into training and test set.
# A stratified random split of the data
idx_train <- createDataPartition(data.df$y,
p = 0.8, # percentage of data as training
list = FALSE)
dt_train <- data.df[idx_train, ]
dt_test <- data.df[-idx_train, ]
table(dt_train$y)
table(dt_test$y)
write.csv(idx_train, file = file.path(saved.dir, paste0("idx_train_", toString(index), ".csv")))
#####################2. Feature Selection
#Feature Selection
opts_sel <- list(n_trials = 10, threshold = 0.8, return_count = FALSE)
sel_features <- select_lasso(as.matrix(dt_train[, 2:dim(dt_train)[2]]), dt_train$y)
sel_features <- gsub("x.", "", sel_features)
print(sel_features)
#repeat this selection 10 times and pick the features that are chosen in
#more than 80% of the repetitions
# selected_features <- select_repeat(Data_combining_scale, Data_group,
#                              selector = select_lasso,
#                              options = opts_sel)
# print(selected_features)
temp.index <- which(colnames(dt_train) %in% sel_features)
dt_train <- dt_train[, c(1, temp.index)]
dt_test <- dt_test[, c(1, temp.index)]
write.csv(sel_features, file = file.path(saved.dir, paste0("sel_features_", toString(index), ".csv")))
}
meta_colors <- list(
"group" = c(
"NA" = "gray",
"progressor" = "#AD07E3",
"non-progressor" = "#238b45"
)
)
library(DMwR2)
#Data a folder to save the results.
output_dir <- 'Progressor_18_27months'
Data_group <- readRDS(file.path(output_dir, "Data_group.RDS"))
Data_group <- factor(Data_group, levels = c("non-progressor", "progressor"))
Data_combining <- readRDS(file.path(output_dir, "Data_combining.RDS"))
Data_combining_scale <- Data_combining[, c(1:(dim(Data_combining)[2]-1))]
#Z-score the data to bring the parameters to the same scale.
#Data_combining_scale <- scale(knnImputation(Data_combining), center = TRUE, scale = TRUE)
#colnames(Data_combining_scale) <- colnames(Data_combining)
#rownames(Data_combining_scale) <- rownames(Data_combining)
#Create a folder to save the results.
saved.dir <- './Classification_RF_LASSO_woRisk6'
if (!dir.exists(saved.dir)){
dir.create((saved.dir))
}
y = Data_group
y = gsub("non-progressor", "NO", y)
y = gsub("progressor", "YES", y)
data.df <- data.frame(y = factor(y), x = Data_combining_scale) #[, selected_features]) 15
library(caret)
library(systemsseRology)
for(index in 1 : 100){
set.seed(index + 1986)
#####################1. Split the data into training and test set.
# A stratified random split of the data
idx_train <- createDataPartition(data.df$y,
p = 0.8, # percentage of data as training
list = FALSE)
dt_train <- data.df[idx_train, ]
dt_test <- data.df[-idx_train, ]
table(dt_train$y)
table(dt_test$y)
write.csv(idx_train, file = file.path(saved.dir, paste0("idx_train_", toString(index), ".csv")))
#####################2. Feature Selection
#Feature Selection
opts_sel <- list(n_trials = 10, threshold = 0.8, return_count = FALSE)
sel_features <- select_lasso(as.matrix(dt_train[, 2:dim(dt_train)[2]]), dt_train$y)
sel_features <- gsub("x.", "", sel_features)
print(sel_features)
#repeat this selection 10 times and pick the features that are chosen in
#more than 80% of the repetitions
# selected_features <- select_repeat(Data_combining_scale, Data_group,
#                              selector = select_lasso,
#                              options = opts_sel)
# print(selected_features)
temp.index <- which(colnames(dt_train) %in% sel_features)
dt_train <- dt_train[, c(1, temp.index)]
dt_test <- dt_test[, c(1, temp.index)]
write.csv(sel_features, file = file.path(saved.dir, paste0("sel_features_", toString(index), ".csv")))
}
library(DMwR2)
#Data a folder to save the results.
output_dir <- 'Progressor_18_27months'
Data_group <- readRDS(file.path(output_dir, "Data_group.RDS"))
Data_group <- factor(Data_group, levels = c("non-progressor", "progressor"))
Data_combining <- readRDS(file.path(output_dir, "Data_combining.RDS"))
Data_combining_scale <- Data_combining
y = Data_group
y = gsub("non-progressor", "NO", y)
y = gsub("progressor", "YES", y)
data.df <- data.frame(y = factor(y), x = Data_combining_scale) #[, selected_features]) 15
folder <- './Classification_RF_LASSO'
FeatureName <- colnames(Data_combining_scale)
FeatureName <- gsub(" ", ".", FeatureName)
Features.Selection <- array(0, dim = c(dim(Data_combining_scale)[2], 1))
rownames(Features.Selection) <- FeatureName
for(index in 1 : 100){
sel_features <- read.csv(file.path(folder, paste0("sel_features_", toString(index), ".csv")))
for(feat.index in sel_features$x){
temp.index <- which(feat.index == FeatureName)
if(length(temp.index) == 1){
Features.Selection[temp.index, 1] <- Features.Selection[temp.index, 1] + 1
}else{
print(feat.index)
print("Something is inappropriate!")
}
}
}
library(ggplot2)
data.df <- data.frame(FeatureName = FeatureName, Freq = Features.Selection)
data.df$FeatureName <- factor(data.df$FeatureName,  levels = data.df$FeatureName[order(data.df$Freq, decreasing = TRUE)]) # Factor levels in increasing order
ggplot(data.df, aes(x = FeatureName, y = Freq)) +
geom_bar(stat="identity") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggsave("Features_Freq.png", width = 12, height = 4, dpi = 300)
folder <- './Classification_RF_LASSO_woRisk6'
FeatureName <- colnames(Data_combining_scale)
FeatureName <- gsub(" ", ".", FeatureName)
Features.Selection <- array(0, dim = c(dim(Data_combining_scale)[2], 1))
rownames(Features.Selection) <- FeatureName
for(index in 1 : 100){
sel_features <- read.csv(file.path(folder, paste0("sel_features_", toString(index), ".csv")))
for(feat.index in sel_features$x){
temp.index <- which(feat.index == FeatureName)
if(length(temp.index) == 1){
Features.Selection[temp.index, 1] <- Features.Selection[temp.index, 1] + 1
}else{
print(feat.index)
print("Something is inappropriate!")
}
}
}
library(ggplot2)
data.df <- data.frame(FeatureName = FeatureName, Freq = Features.Selection)
data.df$FeatureName <- factor(data.df$FeatureName,  levels = data.df$FeatureName[order(data.df$Freq, decreasing = TRUE)]) # Factor levels in increasing order
ggplot(data.df, aes(x = FeatureName, y = Freq)) +
geom_bar(stat="identity") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggsave("Features_Freq_woRisk6.png", width = 12, height = 4, dpi = 300)
library(DMwR2)
#Data a folder to save the results.
output_dir <- 'Progressor_18_27months'
Data_group <- readRDS(file.path(output_dir, "Data_group.RDS"))
Data_group <- factor(Data_group, levels = c("non-progressor", "progressor"))
Data_combining <- readRDS(file.path(output_dir, "Data_combining.RDS"))
Data_combining_scale <- Data_combining
y = Data_group
y = gsub("non-progressor", "NO", y)
y = gsub("progressor", "YES", y)
data.df <- data.frame(y = factor(y), x = Data_combining_scale) #[, selected_features]) 15
folder <- './Classification_RF_LASSO'
FeatureName <- colnames(Data_combining_scale)
FeatureName <- gsub(" ", ".", FeatureName)
Features.Selection <- array(0, dim = c(dim(Data_combining_scale)[2], 1))
rownames(Features.Selection) <- FeatureName
for(index in 1 : 100){
sel_features <- read.csv(file.path(folder, paste0("sel_features_", toString(index), ".csv")))
for(feat.index in sel_features$x){
temp.index <- which(feat.index == FeatureName)
if(length(temp.index) == 1){
Features.Selection[temp.index, 1] <- Features.Selection[temp.index, 1] + 1
}else{
print(feat.index)
print("Something is inappropriate!")
}
}
}
library(ggplot2)
data.df <- data.frame(FeatureName = FeatureName, Freq = Features.Selection)
data.df$FeatureName <- factor(data.df$FeatureName,  levels = data.df$FeatureName[order(data.df$Freq, decreasing = TRUE)]) # Factor levels in increasing order
saveRDS(data.df, file.path(folder, "Features_Freq.RDS"))
ggplot(data.df, aes(x = FeatureName, y = Freq)) +
geom_bar(stat="identity") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggsave("Features_Freq.png", width = 12, height = 4, dpi = 300)
folder <- './Classification_RF_LASSO_woRisk6'
FeatureName <- colnames(Data_combining_scale)
FeatureName <- gsub(" ", ".", FeatureName)
Features.Selection <- array(0, dim = c(dim(Data_combining_scale)[2], 1))
rownames(Features.Selection) <- FeatureName
for(index in 1 : 100){
sel_features <- read.csv(file.path(folder, paste0("sel_features_", toString(index), ".csv")))
for(feat.index in sel_features$x){
temp.index <- which(feat.index == FeatureName)
if(length(temp.index) == 1){
Features.Selection[temp.index, 1] <- Features.Selection[temp.index, 1] + 1
}else{
print(feat.index)
print("Something is inappropriate!")
}
}
}
library(ggplot2)
data.df <- data.frame(FeatureName = FeatureName, Freq = Features.Selection)
data.df$FeatureName <- factor(data.df$FeatureName,  levels = data.df$FeatureName[order(data.df$Freq, decreasing = TRUE)]) # Factor levels in increasing order
saveRDS(data.df, file.path(folder, "Features_Freq_woRisk6.RDS"))
ggplot(data.df, aes(x = FeatureName, y = Freq)) +
geom_bar(stat="identity") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggsave("Features_Freq_woRisk6.png", width = 12, height = 4, dpi = 300)
meta_colors <- list(
"group" = c(
"NA" = "gray",
"progressor" = "#AD07E3",
"non-progressor" = "#238b45"
)
)
library(DMwR2)
#Data a folder to save the results.
output_dir <- 'Progressor_18_27months'
Data_group <- readRDS(file.path(output_dir, "Data_group.RDS"))
Data_group <- factor(Data_group, levels = c("non-progressor", "progressor"))
Data_combining <- readRDS(file.path(output_dir, "Data_combining.RDS"))
Data_combining <- scale(Data_combining, center = TRUE, scale = TRUE)
library(dplyr)
folder <- './Classification_RF_LASSO_woRisk6'
data.df <- readRDS(file.path(folder, "Features_Freq_woRisk6.RDS"))
temp.df <- top_n(data.df, 12, Freq)
interested.features <- as.character(temp.df$FeatureName)
# interested.features <- c("FcgR3B_PPD", "IgG1_LAM", "FcgR2A_PPD", "IgG4_Ag85",
#                          "IgG2_LAM", "IgA1_PPD", "IgG4_Hspx", "FcgR2B_PPD",
#                          "IgM_ESAT6", "FcgR3A_PPD","IgG1_PPD", "IgG3_PPD" )
Data_combining_selected <- Data_combining[, interested.features]
y = Data_group
y = gsub("non-progressor", 0, y)
y = gsub("progressor", 1, y)
data.df <- data.frame(y, Data_combining_selected)
#Create a folder to save the results.
saved.dir <- './SeroScore_FcR_Lasso'
if (!dir.exists(saved.dir)){
dir.create((saved.dir))
}
FcR <- interested.features[1:12]
n <- length(FcR)
l <- rep(list(0:1), n)
FcR.index <- expand.grid(l)
FcR.index <- FcR.index[-1, ]
FcR.Data <- Data_combining_selected[, FcR]
colnames(FcR.Data) <- FcR
saveRDS(FcR.Data, file.path(saved.dir, "FcR.Data.RDS"))
# Negative <- interested.features[13:16]
#
# n <- length(Negative)
# l <- rep(list(0:1), n)
#
# Neg.index <- expand.grid(l)
# Neg.index <- Neg.index[-1, ]
# Neg.Data <- Data_combining_selected[, Negative]
# colnames(Neg.Data) <- Negative
# saveRDS(Neg.Data, file.path(saved.dir, "Neg.Data.RDS"))
seroScore <- data.frame(matrix(NA, nrow = dim(Data_combining)[1], ncol = dim(FcR.index)[1]))
curr.index <- 1
for(index.p in 1 : dim(FcR.index)[1]){
#for(index.n in 1 : dim(Neg.index)[1]){
#For positive parts.
temp.FcR.index <- FcR.index[index.p, ]
temp.FcR.index <- which(temp.FcR.index == 1)
if(length(temp.FcR.index) > 1){
Temp.pos <- rowSums(FcR.Data[, temp.FcR.index]) #Sum each rows.
}else{
Temp.pos <- FcR.Data[, temp.FcR.index]
}
#Calculate the difference.
Temp.value <- Temp.pos
seroScore[, curr.index] <- Temp.value
curr.index <- curr.index + 1
#}
}
saveRDS(seroScore, file.path(saved.dir, 'SeroScore.RDS'))
write.csv(seroScore, file.path(saved.dir, "SeroScore.csv"))
library(dplyr)
folder <- './Classification_RF_LASSO_woRisk6'
data.df <- readRDS(file.path(folder, "Features_Freq_woRisk6.RDS"))
temp.df <- top_n(data.df, 12, Freq)
interested.features <- as.character(temp.df$FeatureName)
interested.features
meta_colors <- list(
"group" = c(
"progressor" = "#AD07E3",
"non-progressor" = "#238b45"
),
"group1" = c(
"progressor" = "#AD07E3",
"non-progressor" = "#238b45"
)
)
set.seed(1986)
library(RColorBrewer)
library(viridis)
quantile_breaks <- function(xs, n = 10) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
folder <- "../2021-10-25-Extract_Dataset_18-27M"
Progressor <- readRDS(file.path(paste0(folder, "/Progressor_18_27months_v2"), "logscale.TB.Progressor.RDS"))
NonProgressor <- readRDS(file.path(paste0(folder, "/nonprogressors"), "nonprogressor.Data.RDS"))
nonProgressor.metadata <- readRDS(file.path(paste0(folder, "/nonprogressors"), "nonprogressor.meta.RDS"))
#NonProgressor.Avg <- readRDS(file.path(paste0(folder, "/nonprogressors"), "nonprogressor.Avg.RDS"))
nonProgressor.metadata.Avg <- readRDS(file.path(paste0(folder, "/nonprogressors"), "nonprogressor.meta.Avg.RDS"))
Syssero.Name <- colnames(NonProgressor)
all(colnames(Progressor) == colnames(NonProgressor))
## Provide the dir name(i.e sub dir) that you want to create under main dir:
output_dir <- 'Progressor_18_27months'
if (!dir.exists(output_dir)){
dir.create(output_dir)
}
NonProgressor.selected.index <- c()
for(index in 1 : dim(nonProgressor.metadata.Avg)[1]){
temp.ID <- as.character(nonProgressor.metadata.Avg[index, ]$ID)
rows.index <- which(as.character(nonProgressor.metadata$ID) == temp.ID)
selected.idx <- sample(rows.index,1)
NonProgressor.selected.index <- c(NonProgressor.selected.index, selected.idx)
}
NonProgressor.selected <- NonProgressor[NonProgressor.selected.index, ]
#
# temp.index <- which(apply(NonProgressor.selected, 1, function(x) all(is.na(x))))
# NonProgressor.selected <- NonProgressor.selected[-temp.index, ]
all(colnames(NonProgressor.selected) == colnames(Progressor))
Data_combining <- rbind(Progressor, NonProgressor.selected)
Data_group <- c(rep("progressor", dim(Progressor)[1]), rep("non-progressor", dim(NonProgressor.selected)[1]))
# temp.index <- which(apply(Data_combining, 1, function(x) any(is.na(x))))
# Data_group <- Data_group[-temp.index]
# Data_combining <- Data_combining[-temp.index, ]
saveRDS(Data_group, file.path(output_dir, "Data_group.RDS"))
saveRDS(Data_combining, file.path(output_dir, "Data_combining.RDS"))
write.csv(Data_group, file.path(output_dir, "Data_group.csv"))
write.csv(Data_combining, file.path(output_dir, "Data_combining.csv"))
library(pheatmap)
annotation_row <- data.frame(group1 = Data_group, group = Data_group)
rownames(annotation_row) <- rownames(Data_combining)
ordered_index <- order(annotation_row$group, annotation_row$group1)
annotation_row_ordered <- annotation_row[ordered_index, ]
data.sero.ordered <- scale(Data_combining[ordered_index, ], center = TRUE, scale = TRUE)
mat_breaks <- quantile_breaks(na.omit(unlist(data.sero.ordered)), n = 100)
png(file.path(output_dir, "heatmap.scaled.png"), width=3560, height=1940, res = 300)
pheatmap(
mat = data.sero.ordered,
border_color = NA,
color = colorRampPalette(rev(brewer.pal(n = 8, name = "RdYlBu")))(length(mat_breaks) - 1),
#color = inferno(length(mat_breaks) - 1),
breaks = mat_breaks,
show_rownames = FALSE,
show_colnames = TRUE,
cluster_rows = FALSE,
cluster_cols = TRUE,
annotation_row = annotation_row_ordered,
annotation_colors = meta_colors,
fontsize = 6,
fontsize_col = 5,
fontsize_row = 5,
scale = "none",
main  = "Serology Data with Quantile Color Scale"
)
dev.off()
meta_colors <- list(
"group" = c(
"progressor" = "#AD07E3",
"non-progressor" = "#238b45"
),
"group1" = c(
"progressor" = "#AD07E3",
"non-progressor" = "#238b45"
)
)
set.seed(1986)
library(RColorBrewer)
library(viridis)
quantile_breaks <- function(xs, n = 10) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
folder <- "../2021-10-25-Extract_Dataset_18-27M"
Progressor <- readRDS(file.path(paste0(folder, "/Progressor_18_27months_v2"), "logscale.TB.Progressor.RDS"))
NonProgressor <- readRDS(file.path(paste0(folder, "/nonprogressors"), "nonprogressor.Data.RDS"))
nonProgressor.metadata <- readRDS(file.path(paste0(folder, "/nonprogressors"), "nonprogressor.meta.RDS"))
#NonProgressor.Avg <- readRDS(file.path(paste0(folder, "/nonprogressors"), "nonprogressor.Avg.RDS"))
nonProgressor.metadata.Avg <- readRDS(file.path(paste0(folder, "/nonprogressors"), "nonprogressor.meta.Avg.RDS"))
Syssero.Name <- colnames(NonProgressor)
all(colnames(Progressor) == colnames(NonProgressor))
## Provide the dir name(i.e sub dir) that you want to create under main dir:
output_dir <- 'Progressor_18_27months'
if (!dir.exists(output_dir)){
dir.create(output_dir)
}
NonProgressor.selected.index <- c()
for(index in 1 : dim(nonProgressor.metadata.Avg)[1]){
temp.ID <- as.character(nonProgressor.metadata.Avg[index, ]$ID)
rows.index <- which(as.character(nonProgressor.metadata$ID) == temp.ID)
selected.idx <- sample(rows.index,1)
NonProgressor.selected.index <- c(NonProgressor.selected.index, selected.idx)
}
NonProgressor.selected <- NonProgressor[NonProgressor.selected.index, ]
#
# temp.index <- which(apply(NonProgressor.selected, 1, function(x) all(is.na(x))))
# NonProgressor.selected <- NonProgressor.selected[-temp.index, ]
all(colnames(NonProgressor.selected) == colnames(Progressor))
Data_combining <- rbind(Progressor, NonProgressor.selected)
Data_group <- c(rep("progressor", dim(Progressor)[1]), rep("non-progressor", dim(NonProgressor.selected)[1]))
# temp.index <- which(apply(Data_combining, 1, function(x) any(is.na(x))))
# Data_group <- Data_group[-temp.index]
# Data_combining <- Data_combining[-temp.index, ]
saveRDS(Data_group, file.path(output_dir, "Data_group.RDS"))
saveRDS(Data_combining, file.path(output_dir, "Data_combining.RDS"))
write.csv(Data_group, file.path(output_dir, "Data_group.csv"))
write.csv(Data_combining, file.path(output_dir, "Data_combining.csv"))
library(pheatmap)
annotation_row <- data.frame(group1 = Data_group, group = Data_group)
rownames(annotation_row) <- rownames(Data_combining)
ordered_index <- order(annotation_row$group, annotation_row$group1)
annotation_row_ordered <- annotation_row[ordered_index, ]
data.sero.ordered <- scale(Data_combining[ordered_index, ], center = TRUE, scale = TRUE)
mat_breaks <- quantile_breaks(na.omit(unlist(data.sero.ordered)), n = 100)
png(file.path(output_dir, "heatmap.scaled.png"), width=3560, height=1940, res = 300)
pheatmap(
mat = data.sero.ordered,
border_color = NA,
color = colorRampPalette(rev(brewer.pal(n = 8, name = "RdYlBu")))(length(mat_breaks) - 1),
#color = inferno(length(mat_breaks) - 1),
breaks = mat_breaks,
show_rownames = FALSE,
show_colnames = TRUE,
cluster_rows = FALSE,
cluster_cols = TRUE,
annotation_row = annotation_row_ordered,
annotation_colors = meta_colors,
fontsize = 6,
fontsize_col = 5,
fontsize_row = 5,
scale = "none",
main  = "Serology Data with Quantile Color Scale"
)
dev.off()
