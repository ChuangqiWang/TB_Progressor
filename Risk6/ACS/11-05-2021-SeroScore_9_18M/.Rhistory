write.csv(Data_combining, file.path(output_dir, "Data_combining.csv"))
library(pheatmap)
annotation_row <- data.frame(group1 = Data_group, group = Data_group)
rownames(annotation_row) <- rownames(Data_combining)
ordered_index <- order(annotation_row$group, annotation_row$group1)
annotation_row_ordered <- annotation_row[ordered_index, ]
data.sero.ordered <- scale(Data_combining[ordered_index, ], center = TRUE, scale = TRUE)
mat_breaks <- quantile_breaks(na.omit(unlist(data.sero.ordered)), n = 100)
png(file.path(output_dir, "heatmap.scaled.png"), width=3560, height=1940, res = 300)
pheatmap(
mat = data.sero.ordered,
border_color = NA,
color = colorRampPalette(rev(brewer.pal(n = 8, name = "RdYlBu")))(length(mat_breaks) - 1),
#color = inferno(length(mat_breaks) - 1),
breaks = mat_breaks,
show_rownames = FALSE,
show_colnames = TRUE,
cluster_rows = FALSE,
cluster_cols = TRUE,
annotation_row = annotation_row_ordered,
annotation_colors = meta_colors,
fontsize = 6,
fontsize_col = 5,
fontsize_row = 5,
scale = "none",
main  = "Serology Data with Quantile Color Scale"
)
dev.off()
meta_colors <- list(
"group" = c(
"NA" = "gray",
"progressor" = "#AD07E3",
"non-progressor" = "#238b45"
)
)
library(DMwR)
#Data a folder to save the results.
output_dir <- 'Progressor_0_9months'
Data_group <- readRDS(file.path(output_dir, "Data_group.RDS"))
Data_group <- factor(Data_group, levels = c("non-progressor", "progressor"))
Data_combining <- readRDS(file.path(output_dir, "Data_combining.RDS"))
Data_combining_scale <- Data_combining
#Z-score the data to bring the parameters to the same scale.
#Data_combining_scale <- scale(knnImputation(Data_combining), center = TRUE, scale = TRUE)
#colnames(Data_combining_scale) <- colnames(Data_combining)
#rownames(Data_combining_scale) <- rownames(Data_combining)
#Create a folder to save the results.
saved.dir <- './Classification_RF_LASSO'
if (!dir.exists(saved.dir)){
dir.create((saved.dir))
}
y = Data_group
y = gsub("non-progressor", "NO", y)
y = gsub("progressor", "YES", y)
data.df <- data.frame(y = factor(y), x = Data_combining_scale) #[, selected_features]) 15
library(caret)
library(systemsseRology)
for(index in 1 : 100){
set.seed(index + 1986)
#####################1. Split the data into training and test set.
# A stratified random split of the data
idx_train <- createDataPartition(data.df$y,
p = 0.8, # percentage of data as training
list = FALSE)
dt_train <- data.df[idx_train, ]
dt_test <- data.df[-idx_train, ]
table(dt_train$y)
table(dt_test$y)
write.csv(idx_train, file = file.path(saved.dir, paste0("idx_train_", toString(index), ".csv")))
#####################2. Feature Selection
#Feature Selection
opts_sel <- list(n_trials = 10, threshold = 0.3, return_count = FALSE)
sel_features <- select_lasso(as.matrix(dt_train[, 2:dim(dt_train)[2]]), dt_train$y)
sel_features <- gsub("x.", "", sel_features)
#print(sel_features)
#repeat this selection 10 times and pick the features that are chosen in
#more than 80% of the repetitions
selected_features <- select_repeat(Data_combining_scale, Data_group,
selector = select_lasso,
options = opts_sel)
print(selected_features)
write.csv(selected_features, file = file.path(saved.dir, paste0("sel_features_", toString(index), ".csv")))
}
meta_colors <- list(
"group" = c(
"NA" = "gray",
"progressor" = "#AD07E3",
"non-progressor" = "#238b45"
)
)
#Create a folder to save the results.
saved.dir <- './SeroScore_substract_zscore'
if (!dir.exists(saved.dir)){
dir.create((saved.dir))
}
library(DMwR)
#Data a folder to save the results.
output_dir <- 'Progressor_0_12months'
Data_group <- readRDS(file.path(output_dir, "Data_group.RDS"))
meta_colors <- list(
"group" = c(
"NA" = "gray",
"progressor" = "#AD07E3",
"non-progressor" = "#238b45"
)
)
#Create a folder to save the results.
saved.dir <- './SeroScore_substract_zscore'
if (!dir.exists(saved.dir)){
dir.create((saved.dir))
}
library(DMwR)
#Data a folder to save the results.
output_dir <- 'Progressor_0_9months'
Data_group <- readRDS(file.path(output_dir, "Data_group.RDS"))
Data_group <- factor(Data_group, levels = c("non-progressor", "progressor"))
Data_combining <- readRDS(file.path(output_dir, "Data_combining.RDS"))
Data_combining <- scale(Data_combining, center = TRUE, scale = TRUE)
interested.features <- c("totalIgG_PPD",  "totalIgG_LAM",
"IgG1_LAM",  "IgG1_PPD", "IgA1_LAM",  "IgA1_PPD", "IgM_LAM",  "IgM_PPD",
"FcgR2A_PPD", "FcgR2A_LAM", "FcgR2B_PPD", "FcgR2B_LAM","FcgR2B_Hspx",
"SNA_LAM", "RCA_LAM", "SNA_Ag85", "RCA_Ag85", "SNA_PPD", "RCA_PPD",
"Risk6"
)
Data_combining_selected <- Data_combining[, interested.features]
y = Data_group
y = gsub("non-progressor", 0, y)
y = gsub("progressor", 1, y)
data.df <- data.frame(y, Data_combining_selected)
Positive <- interested.features[1:8]
n <- length(Positive)
l <- rep(list(0:1), n)
Post.index <- expand.grid(l)
Post.index <- Post.index[-1, ]
Post.Data <- Data_combining_selected[, Positive]
colnames(Post.Data) <- Positive
saveRDS(Post.Data, file.path(saved.dir, "Post.Data.RDS"))
Negative <- interested.features[14:19]
n <- length(Negative)
l <- rep(list(0:1), n)
Neg.index <- expand.grid(l)
Neg.index <- Neg.index[-1, ]
Neg.Data <- Data_combining_selected[, Negative]
colnames(Neg.Data) <- Negative
saveRDS(Neg.Data, file.path(saved.dir, "Neg.Data.RDS"))
View(Post.Data)
View(Post.index)
View(Neg.index)
Post.index <- Post.index[c(163, 98, 228), ]
Neg.index <- Neg.index[c(51, 35), ]
View(Post.index)
meta_colors <- list(
"group" = c(
"NA" = "gray",
"progressor" = "#AD07E3",
"non-progressor" = "#238b45"
)
)
#Create a folder to save the results.
saved.dir <- './SeroScore_substract_zscore'
if (!dir.exists(saved.dir)){
dir.create((saved.dir))
}
library(DMwR)
#Data a folder to save the results.
output_dir <- 'Progressor_0_9months'
Data_group <- readRDS(file.path(output_dir, "Data_group.RDS"))
Data_group <- factor(Data_group, levels = c("non-progressor", "progressor"))
Data_combining <- readRDS(file.path(output_dir, "Data_combining.RDS"))
Data_combining <- scale(Data_combining, center = TRUE, scale = TRUE)
interested.features <- c("totalIgG_PPD",  "totalIgG_LAM",
"IgG1_LAM",  "IgG1_PPD", "IgA1_LAM",  "IgA1_PPD", "IgM_LAM",  "IgM_PPD",
"FcgR2A_PPD", "FcgR2A_LAM", "FcgR2B_PPD", "FcgR2B_LAM","FcgR2B_Hspx",
"SNA_LAM", "RCA_LAM", "SNA_Ag85", "RCA_Ag85", "SNA_PPD", "RCA_PPD",
"Risk6"
)
Data_combining_selected <- Data_combining[, interested.features]
y = Data_group
y = gsub("non-progressor", 0, y)
y = gsub("progressor", 1, y)
data.df <- data.frame(y, Data_combining_selected)
Positive <- interested.features[1:8]
n <- length(Positive)
l <- rep(list(0:1), n)
Post.index <- expand.grid(l)
Post.index <- Post.index[-1, ]
Post.Data <- Data_combining_selected[, Positive]
colnames(Post.Data) <- Positive
saveRDS(Post.Data, file.path(saved.dir, "Post.Data.RDS"))
Negative <- interested.features[14:19]
n <- length(Negative)
l <- rep(list(0:1), n)
Neg.index <- expand.grid(l)
Neg.index <- Neg.index[-1, ]
Neg.Data <- Data_combining_selected[, Negative]
colnames(Neg.Data) <- Negative
saveRDS(Neg.Data, file.path(saved.dir, "Neg.Data.RDS"))
View(Post.index)
Post.index <- Post.index[c(162, 97, 227), ]
Neg.index <- Neg.index[c(50, 34), ]
View(Neg.index)
meta_colors <- list(
"group" = c(
"NA" = "gray",
"progressor" = "#AD07E3",
"non-progressor" = "#238b45"
)
)
#Create a folder to save the results.
saved.dir <- './SeroScore_substract_zscore'
if (!dir.exists(saved.dir)){
dir.create((saved.dir))
}
library(DMwR)
#Data a folder to save the results.
output_dir <- 'Progressor_0_9months'
Data_group <- readRDS(file.path(output_dir, "Data_group.RDS"))
Data_group <- factor(Data_group, levels = c("non-progressor", "progressor"))
Data_combining <- readRDS(file.path(output_dir, "Data_combining.RDS"))
Data_combining <- scale(Data_combining, center = TRUE, scale = TRUE)
interested.features <- c("totalIgG_PPD",  "totalIgG_LAM",
"IgG1_LAM",  "IgG1_PPD", "IgA1_LAM",  "IgA1_PPD", "IgM_LAM",  "IgM_PPD",
"FcgR2A_PPD", "FcgR2A_LAM", "FcgR2B_PPD", "FcgR2B_LAM","FcgR2B_Hspx",
"SNA_LAM", "RCA_LAM", "SNA_Ag85", "RCA_Ag85", "SNA_PPD", "RCA_PPD",
"Risk6"
)
Data_combining_selected <- Data_combining[, interested.features]
y = Data_group
y = gsub("non-progressor", 0, y)
y = gsub("progressor", 1, y)
data.df <- data.frame(y, Data_combining_selected)
Positive <- interested.features[1:8]
n <- length(Positive)
l <- rep(list(0:1), n)
Post.index <- expand.grid(l)
Post.index <- Post.index[-1, ]
Post.Data <- Data_combining_selected[, Positive]
colnames(Post.Data) <- Positive
saveRDS(Post.Data, file.path(saved.dir, "Post.Data.RDS"))
Negative <- interested.features[14:19]
n <- length(Negative)
l <- rep(list(0:1), n)
Neg.index <- expand.grid(l)
Neg.index <- Neg.index[-1, ]
Neg.Data <- Data_combining_selected[, Negative]
colnames(Neg.Data) <- Negative
saveRDS(Neg.Data, file.path(saved.dir, "Neg.Data.RDS"))
Post.index <- Post.index[c(162, 97, 227), ]
Neg.index <- Neg.index[c(50, 34), ]
seroScore <- data.frame(matrix(NA, nrow = dim(Data_combining)[1], ncol = 3 * 2))
curr.index <- 1
for(index.p in 1 : dim(Post.index)[1]){
for(index.n in 1 : dim(Neg.index)[1]){
#For positive parts.
temp.post.index <- Post.index[index.p, ]
temp.post.index <- which(temp.post.index == 1)
if(length(temp.post.index) > 1){
Temp.pos <- rowSums(Post.Data[, temp.post.index]) #Sum each rows.
}else{
Temp.pos <- Post.Data[, temp.post.index]
}
#For negative parts.
temp.neg.index <- Neg.index[index.n, ]
temp.neg.index <- which(temp.neg.index == 1)
if(length(temp.neg.index) > 1){
Temp.neg <- rowSums(Neg.Data[, temp.neg.index]) #Sum each rows.
}else{
Temp.neg <- Neg.Data[, temp.neg.index]
}
#Calculate the difference.
Temp.value <- Temp.pos - Temp.neg
seroScore[, curr.index] <- Temp.value
curr.index <- curr.index + 1
}
}
saveRDS(seroScore, file.path(saved.dir, 'SeroScore.RDS'))
write.csv(seroScore, file.path(saved.dir, "SeroScore.csv"))
View(seroScore)
meta_colors <- list(
"group" = c(
"progressor" = "#AD07E3",
"non-progressor" = "#238b45"
),
"group1" = c(
"progressor" = "#AD07E3",
"non-progressor" = "#238b45"
)
)
set.seed(1986)
library(RColorBrewer)
library(viridis)
quantile_breaks <- function(xs, n = 10) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
folder <- "../11-04-2021-ROC_curve_score_9_18M"
Progressor <- readRDS(file.path(paste0(folder, "/Progressor_9_18months"), "Progressor_9_18months.RDS"))
NonProgressor <- readRDS(file.path(paste0(folder, "/NonProgressors"), "NonProgressor.RDS"))
NonProgressor.Pat.IDs <- readRDS(file.path(paste0(folder, "/NonProgressors"), "NonProgressor.Patient.IDs.RDS"))
Syssero.Name <- readRDS(file.path(paste0(folder, "/NonProgressors"), "SystemSerogy.RDS"))
#
#Risk6 <- Syssero.Name[length(Syssero.Name)]
eliminating.antigen <- c('Ebola', 'HA', 'CMV', 'CMV_gB', 'CMV_pentamer', 'EBV')
Ebola.related <- grep('Ebola', Syssero.Name, value=TRUE)
HA.related <- grep('HA', Syssero.Name, value=TRUE)
CMV.related <- grep('CMV', Syssero.Name, value= TRUE)
EBV.related <- grep('EBV', Syssero.Name, value = TRUE)
excluded.features <- c(Ebola.related, HA.related, CMV.related, EBV.related) #, Risk6)
feature.index <- which(Syssero.Name %in% excluded.features)
#
Syssero.Name <- setdiff(Syssero.Name, excluded.features)
#
Progressor <- Progressor[, -feature.index]
NonProgressor <- NonProgressor[, , -feature.index]
## Provide the dir name(i.e sub dir) that you want to create under main dir:
output_dir <- 'Progressor_9_18months'
if (!dir.exists(output_dir)){
dir.create(output_dir)
}
NonProgressor.Flag <- array(NA, dim = c(105, 5))
for(Pat.ID in 1 : 105){
for(Day.ID in 1 : 5){
temp.data <- NonProgressor[Pat.ID, Day.ID, ]
NonProgressor.Flag[Pat.ID, Day.ID] <- any(is.na(temp.data))
}
}
#Select the Pat.ID
#Randimized and choose one Day per Patient
Day.Flag <- array(NA, dim = 105)
NonProgressor.selected <- array(NA, dim = c(105, dim(Progressor)[2]))
for(Pat.ID in 1 : 105){
temp.flag <- which(NonProgressor.Flag[Pat.ID, ] == FALSE)
if(length(temp.flag) != 0){
if(length(temp.flag) > 1)
Day.Flag[Pat.ID] <- sample(temp.flag, 1)
else
Day.Flag[Pat.ID] <- temp.flag
NonProgressor.selected[Pat.ID, ] <- NonProgressor[Pat.ID, Day.Flag[Pat.ID], ]
}
}
rownames(NonProgressor.selected) <- NonProgressor.Pat.IDs$progressors..Sample.ID.
colnames(NonProgressor.selected) <- Syssero.Name
temp.index <- which(apply(NonProgressor.selected, 1, function(x) all(is.na(x))))
NonProgressor.selected <- NonProgressor.selected[-temp.index, ]
all(colnames(NonProgressor.selected) == colnames(Progressor))
Data_combining <- rbind(Progressor, NonProgressor.selected)
Data_group <- c(rep("progressor", dim(Progressor)[1]), rep("non-progressor", dim(NonProgressor.selected)[1]))
temp.index <- which(apply(Data_combining, 1, function(x) any(is.na(x))))
Data_group <- Data_group[-temp.index]
Data_combining <- Data_combining[-temp.index, ]
saveRDS(Data_group, file.path(output_dir, "Data_group.RDS"))
saveRDS(Data_combining, file.path(output_dir, "Data_combining.RDS"))
write.csv(Data_group, file.path(output_dir, "Data_group.csv"))
write.csv(Data_combining, file.path(output_dir, "Data_combining.csv"))
library(pheatmap)
annotation_row <- data.frame(group1 = Data_group, group = Data_group)
rownames(annotation_row) <- rownames(Data_combining)
ordered_index <- order(annotation_row$group, annotation_row$group1)
annotation_row_ordered <- annotation_row[ordered_index, ]
data.sero.ordered <- scale(Data_combining[ordered_index, ], center = TRUE, scale = TRUE)
mat_breaks <- quantile_breaks(na.omit(unlist(data.sero.ordered)), n = 100)
png(file.path(output_dir, "heatmap.scaled.png"), width=3560, height=1940, res = 300)
pheatmap(
mat = data.sero.ordered,
border_color = NA,
color = colorRampPalette(rev(brewer.pal(n = 8, name = "RdYlBu")))(length(mat_breaks) - 1),
#color = inferno(length(mat_breaks) - 1),
breaks = mat_breaks,
show_rownames = FALSE,
show_colnames = TRUE,
cluster_rows = FALSE,
cluster_cols = TRUE,
annotation_row = annotation_row_ordered,
annotation_colors = meta_colors,
fontsize = 6,
fontsize_col = 5,
fontsize_row = 5,
scale = "none",
main  = "Serology Data with Quantile Color Scale"
)
dev.off()
meta_colors <- list(
"group" = c(
"NA" = "gray",
"progressor" = "#AD07E3",
"non-progressor" = "#238b45"
)
)
library(DMwR)
#Data a folder to save the results.
output_dir <- 'Progressor_9_18months'
Data_group <- readRDS(file.path(output_dir, "Data_group.RDS"))
Data_group <- factor(Data_group, levels = c("non-progressor", "progressor"))
Data_combining <- readRDS(file.path(output_dir, "Data_combining.RDS"))
Data_combining_scale <- Data_combining
#Z-score the data to bring the parameters to the same scale.
#Data_combining_scale <- scale(knnImputation(Data_combining), center = TRUE, scale = TRUE)
#colnames(Data_combining_scale) <- colnames(Data_combining)
#rownames(Data_combining_scale) <- rownames(Data_combining)
#Create a folder to save the results.
saved.dir <- './Classification_RF_LASSO'
if (!dir.exists(saved.dir)){
dir.create((saved.dir))
}
y = Data_group
y = gsub("non-progressor", "NO", y)
y = gsub("progressor", "YES", y)
data.df <- data.frame(y = factor(y), x = Data_combining_scale) #[, selected_features]) 15
library(caret)
library(systemsseRology)
for(index in 1 : 100){
set.seed(index + 1986)
#####################1. Split the data into training and test set.
# A stratified random split of the data
idx_train <- createDataPartition(data.df$y,
p = 0.8, # percentage of data as training
list = FALSE)
dt_train <- data.df[idx_train, ]
dt_test <- data.df[-idx_train, ]
table(dt_train$y)
table(dt_test$y)
write.csv(idx_train, file = file.path(saved.dir, paste0("idx_train_", toString(index), ".csv")))
#####################2. Feature Selection
#Feature Selection
opts_sel <- list(n_trials = 10, threshold = 0.3, return_count = FALSE)
sel_features <- select_lasso(as.matrix(dt_train[, 2:dim(dt_train)[2]]), dt_train$y)
sel_features <- gsub("x.", "", sel_features)
#print(sel_features)
#repeat this selection 10 times and pick the features that are chosen in
#more than 80% of the repetitions
selected_features <- select_repeat(Data_combining_scale, Data_group,
selector = select_lasso,
options = opts_sel)
print(selected_features)
write.csv(selected_features, file = file.path(saved.dir, paste0("sel_features_", toString(index), ".csv")))
}
meta_colors <- list(
"group" = c(
"NA" = "gray",
"progressor" = "#AD07E3",
"non-progressor" = "#238b45"
)
)
#Create a folder to save the results.
saved.dir <- './SeroScore_substract_zscore'
if (!dir.exists(saved.dir)){
dir.create((saved.dir))
}
library(DMwR)
#Data a folder to save the results.
output_dir <- 'Progressor_9_18months'
Data_group <- readRDS(file.path(output_dir, "Data_group.RDS"))
Data_group <- factor(Data_group, levels = c("non-progressor", "progressor"))
Data_combining <- readRDS(file.path(output_dir, "Data_combining.RDS"))
Data_combining <- scale(Data_combining, center = TRUE, scale = TRUE)
interested.features <- c("totalIgG_PPD",  "totalIgG_LAM",
"IgG1_LAM",  "IgG1_PPD", "IgA1_LAM",  "IgA1_PPD", "IgM_LAM",  "IgM_PPD",
"FcgR2A_PPD", "FcgR2A_LAM", "FcgR2B_PPD", "FcgR2B_LAM","FcgR2B_Hspx",
"SNA_LAM", "RCA_LAM", "SNA_Ag85", "RCA_Ag85", "SNA_PPD", "RCA_PPD",
"Risk6"
)
Data_combining_selected <- Data_combining[, interested.features]
y = Data_group
y = gsub("non-progressor", 0, y)
y = gsub("progressor", 1, y)
data.df <- data.frame(y, Data_combining_selected)
Positive <- interested.features[1:8]
n <- length(Positive)
l <- rep(list(0:1), n)
Post.index <- expand.grid(l)
Post.index <- Post.index[-1, ]
Post.Data <- Data_combining_selected[, Positive]
colnames(Post.Data) <- Positive
saveRDS(Post.Data, file.path(saved.dir, "Post.Data.RDS"))
Negative <- interested.features[14:19]
n <- length(Negative)
l <- rep(list(0:1), n)
Neg.index <- expand.grid(l)
Neg.index <- Neg.index[-1, ]
Neg.Data <- Data_combining_selected[, Negative]
colnames(Neg.Data) <- Negative
saveRDS(Neg.Data, file.path(saved.dir, "Neg.Data.RDS"))
Post.index <- Post.index[c(162, 97, 227), ]
Neg.index <- Neg.index[c(50, 34), ]
seroScore <- data.frame(matrix(NA, nrow = dim(Data_combining)[1], ncol = 3 * 2))
curr.index <- 1
for(index.p in 1 : dim(Post.index)[1]){
for(index.n in 1 : dim(Neg.index)[1]){
#For positive parts.
temp.post.index <- Post.index[index.p, ]
temp.post.index <- which(temp.post.index == 1)
if(length(temp.post.index) > 1){
Temp.pos <- rowSums(Post.Data[, temp.post.index]) #Sum each rows.
}else{
Temp.pos <- Post.Data[, temp.post.index]
}
#For negative parts.
temp.neg.index <- Neg.index[index.n, ]
temp.neg.index <- which(temp.neg.index == 1)
if(length(temp.neg.index) > 1){
Temp.neg <- rowSums(Neg.Data[, temp.neg.index]) #Sum each rows.
}else{
Temp.neg <- Neg.Data[, temp.neg.index]
}
#Calculate the difference.
Temp.value <- Temp.pos - Temp.neg
seroScore[, curr.index] <- Temp.value
curr.index <- curr.index + 1
}
}
saveRDS(seroScore, file.path(saved.dir, 'SeroScore.RDS'))
write.csv(seroScore, file.path(saved.dir, "SeroScore.csv"))
