---
title: "R Notebook"
output: html_notebook
---

```{r color label}
meta_colors <- list(
  "group" = c(
    "progressor" = "#AD07E3",
    "nonprogressor" = "#2166ac"
    ),
  "VisitType" = c(
    "[0,6)" = "#c7e9c0", 
    "[6,12)" = "#74c476", 
    "[12,18)" = "#238b45", 
    "[18,24)" = "#00441b"
  )
)
``` 

Quantile Breaks
```{r}
library(RColorBrewer)
library(viridis)
quantile_breaks <- function(xs, n = 10) {
  breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
  breaks[!duplicated(breaks)]
}

```

load the dataset.
```{r}
folder <- "../04-29-2021-Data_Exploring_AddRisk6/results.adding"

SystemSero <- readRDS(file.path(folder, "SystemSerogy.RDS"))
#Remove Risk6
SystemSero <- SystemSero[, 1:78]
meta.sero.data <- readRDS(file.path(folder, "meta.data.VisitType.RDS"))
```

```{r}
#Create a folder to save the results.
saved.dir <- './results'
if (!dir.exists(saved.dir)){
  dir.create((saved.dir))
}
```

```{r}
feature.name <- colnames(SystemSero)
#temp.index <- grep("HA|albumin", feature.name)
TB.seroSeorgy <- SystemSero#[, -temp.index]
feature.name <- colnames(TB.seroSeorgy)
```


```{r}
meta.sero.data$Ragon_ID <- factor(meta.sero.data$Ragon_ID)
meta.sero.data$sex <- factor(meta.sero.data$sex, levels = c("Female", "Male"))
meta.sero.data$BinTimetoTB <- factor(meta.sero.data$BinTimetoTB, levels = c("[0,6)", "[6,12)", "[12,18)", "[18,24)"))

#3) Removing all the features including NA.
Temp.index <- which(apply(TB.seroSeorgy, 1, function(x) all(is.na(x))))
```



```{r}
library(pheatmap)

annotation_row <- data.frame(VisitType = meta.sero.data$BinTimetoTB, group = meta.sero.data$group)
rownames(annotation_row) <- rownames(meta.sero.data)

ordered_index <- order(annotation_row$group, annotation_row$VisitType)
annotation_row_ordered <- annotation_row[ordered_index, ]

data.sero.ordered <- TB.seroSeorgy[ordered_index, ]

mat_breaks <- quantile_breaks(na.omit(unlist(data.sero.ordered)), n = 100)
png(file.path(saved.dir, "heatmap.png"), width=3560, height=1940, res = 300)
pheatmap(
    mat = data.sero.ordered,
   border_color = NA,
    color = colorRampPalette(rev(brewer.pal(n = 8, name = "RdYlBu")))(length(mat_breaks) - 1),
    #color = inferno(length(mat_breaks) - 1),
    breaks = mat_breaks,
    show_rownames = FALSE,
    show_colnames = TRUE,
    cluster_rows = FALSE,
    cluster_cols = TRUE,
    annotation_row = annotation_row_ordered,
    annotation_colors = meta_colors,
    fontsize = 6,
    fontsize_col = 5,
    fontsize_row = 5,
    scale = "none",
    main  = "Serology Data with Quantile Color Scale"
  )
dev.off()

```


```{r}
library(pheatmap)

annotation_row <- data.frame(VisitType = meta.sero.data$BinTimetoTB, group = meta.sero.data$group)
rownames(annotation_row) <- rownames(meta.sero.data)

ordered_index <- order(annotation_row$group, annotation_row$VisitType)
annotation_row_ordered <- annotation_row[ordered_index, ]

data.sero.ordered <- scale(TB.seroSeorgy[ordered_index, ], center = TRUE, scale = TRUE)

mat_breaks <- quantile_breaks(na.omit(unlist(data.sero.ordered)), n = 100)
png(file.path(saved.dir, "heatmap.zscore.png"), width=3560, height=1940, res = 300)
pheatmap(
    mat = data.sero.ordered,
   border_color = NA,
    color = colorRampPalette(rev(brewer.pal(n = 8, name = "RdYlBu")))(length(mat_breaks) - 1),
    #color = inferno(length(mat_breaks) - 1),
    breaks = mat_breaks,
    show_rownames = FALSE,
    show_colnames = TRUE,
    cluster_rows = FALSE,
    cluster_cols = TRUE,
    annotation_row = annotation_row_ordered,
    annotation_colors = meta_colors,
    fontsize = 6,
    fontsize_col = 5,
    fontsize_row = 5,
    scale = "none",
    main  = "Serology Data with Quantile Color Scale"
  )
dev.off()

```

```{r}
features <- colnames(TB.seroSeorgy)
# data frame for annotation of features
df_features <- data.frame(name = features,
                          antibody = gsub("_.*", "", features),
                          antigen = sub(".*?_", "", features),
                          feature_class = NA)

df_features$feature_class[which(grepl("Ig", df_features$name))] <- "Titer"
df_features$feature_class[which(grepl("Fcg", df_features$name))] <- "Fc"
df_features$feature_class[which(grepl("SNA|RCA", df_features$name))] <- "Lectin"

df_features$feature_class <- factor(df_features$feature_class)

TB.seroSeorgy.log2 <- TB.seroSeorgy
for(i in 1:dim(TB.seroSeorgy)[2]){ 
  temp.matrix <- TB.seroSeorgy[, i]
  temp.matrix[temp.matrix < 0] <- 0
  if(df_features[i, ]$feature_class == "Lectin"){
    totalIgG <- paste0("IgG_", df_features[i, ]$antigen)
    TB.seroSeorgy.log2[, i] <- temp.matrix / TB.seroSeorgy[, totalIgG]
  }else{
    TB.seroSeorgy.log2[, i] <- log2(temp.matrix + 1)
  }
  
}

meta.sero.data.log2.zscore <- scale(TB.seroSeorgy.log2, center = TRUE, scale = TRUE)
```


```{r}
library(pheatmap)

annotation_row <- data.frame(VisitType = meta.sero.data$BinTimetoTB, group = meta.sero.data$group)
rownames(annotation_row) <- rownames(meta.sero.data)

ordered_index <- order(annotation_row$group, annotation_row$VisitType)
annotation_row_ordered <- annotation_row[ordered_index, ]

data.sero.ordered <- TB.seroSeorgy.log2[ordered_index, ]

mat_breaks <- quantile_breaks(na.omit(unlist(data.sero.ordered)), n = 100)
png(file.path(saved.dir, "heatmap.log2.png"), width=3560, height=1940, res = 300)
pheatmap(
    mat = data.sero.ordered,
   border_color = NA,
    color = colorRampPalette(rev(brewer.pal(n = 8, name = "RdYlBu")))(length(mat_breaks) - 1),
    #color = inferno(length(mat_breaks) - 1),
    breaks = mat_breaks,
    show_rownames = FALSE,
    show_colnames = TRUE,
    cluster_rows = FALSE,
    cluster_cols = TRUE,
    annotation_row = annotation_row_ordered,
    annotation_colors = meta_colors,
    fontsize = 6,
    fontsize_col = 5,
    fontsize_row = 5,
    scale = "none",
    main  = "Serology Data with Quantile Color Scale"
  )
dev.off()

```
```{r}
library(pheatmap)

annotation_row <- data.frame(VisitType = meta.sero.data$BinTimetoTB, group = meta.sero.data$group)
rownames(annotation_row) <- rownames(meta.sero.data)

ordered_index <- order(annotation_row$group, annotation_row$VisitType)
annotation_row_ordered <- annotation_row[ordered_index, ]

data.sero.ordered <- scale(meta.sero.data.log2.zscore[ordered_index, ], center = TRUE, scale = TRUE)

mat_breaks <- quantile_breaks(na.omit(unlist(data.sero.ordered)), n = 100)
png(file.path(saved.dir, "heatmap.log2.zscore.png"), width=3560, height=1940, res = 300)
pheatmap(
    mat = data.sero.ordered,
   border_color = NA,
    color = colorRampPalette(rev(brewer.pal(n = 8, name = "RdYlBu")))(length(mat_breaks) - 1),
    #color = inferno(length(mat_breaks) - 1),
    breaks = mat_breaks,
    show_rownames = FALSE,
    show_colnames = TRUE,
    cluster_rows = FALSE,
    cluster_cols = TRUE,
    annotation_row = annotation_row_ordered,
    annotation_colors = meta_colors,
    fontsize = 6,
    fontsize_col = 5,
    fontsize_row = 5,
    scale = "none",
    main  = "Serology Data with Quantile Color Scale"
  )
dev.off()

```

Do linear mixed model to compare the explainative significance of each feature related to Clinical.label.
```{r}
library(lme4)
#library(MuMIn)
#Create a folder to save the results.
saved.dic <- './LinearMixedModel.VisitDate'
if (!dir.exists(saved.dic)){
  dir.create((saved.dic))
}
#Build two models with or without clinical.label and then compare the significance using anova (likehood ratio test)
pvalue <- c()
coefficient <- data.frame()
t.value <- data.frame()
for(feat.index in 1:dim(TB.seroSeorgy)[2]){
  response <- feature.name[feat.index]
  print(response)
  temp.data.mlm <- cbind(meta.sero.data, meta.sero.data.log2.zscore[, response])
  colnames(temp.data.mlm)[13] <- 'response'
  #Basic model without considering Pat.clinical.label variable.
  model.null <- lmer(response ~ 1 + sex + Age  + VisitType.Cal  +  (1|ID), data = temp.data.mlm, REML = FALSE)
  saveRDS(summary(model.null), file.path(saved.dic, paste(response, 'null.model.RDS')))
  saveRDS(coef(model.null)$SubjectID, file.path(saved.dic, paste(response, 'null.mode.coeff.RDS')))
  
  print("Full")
  #Alternative model with Pat.clinical.label variable.
  model.alternative <- lmer(response ~ 1 + sex + Age  + VisitType.Cal + group + (1|ID), data = temp.data.mlm, REML = FALSE)
  saveRDS(summary(model.alternative), file.path(saved.dic, paste(response, 'alternative.model.RDS')))
  saveRDS(coef(model.alternative)$SubjectID, file.path(saved.dic, paste(response, 'alternative.mode.coeff.RDS')))
  #
  #model.alternative Summary
  summary.model.alternative <- summary(model.alternative)
  coefficient <- rbind(coefficient, summary.model.alternative$coefficients[, 1])
  t.value <- rbind(t.value, summary.model.alternative$coefficients[, 3])
  
  
  #Likelihood ratio test
  LRT <- anova(model.alternative, model.null)
  saveRDS(LRT, file.path(saved.dic, paste(response, 'LRT.RDS')))
  pvalue <- c(pvalue, LRT$`Pr(>Chisq)`[2])
}

saveRDS(pvalue, 'pvalue.RDS')
saveRDS(coefficient, 'coefficient.RDS')

colnames(coefficient) <- rownames(summary.model.alternative$coefficients)
rownames(coefficient) <- feature.name
coefficient.pLRT <- coefficient
coefficient.pLRT$pvalue <- pvalue
saveRDS(coefficient.pLRT, 'coefficient.pLRT.value.RDS')

colnames(t.value) <- rownames(summary.model.alternative$coefficients)
rownames(t.value) <- feature.name
t.value.pLRT <- t.value
t.value.pLRT$pvalue <- pvalue
saveRDS(t.value.pLRT, 't.value.pLRT.value.RDS')
```


```{r visualization pvalue and effect size}
library(gridExtra)
library(grid)
library(ggplot2)
library(lattice)
library(ggrepel)

#Create a folder to save the results.
saved.dic <- './Visualization.LinearMixedModel.VisitDate'
if (!dir.exists(saved.dic)){
  dir.create((saved.dic))
}



coefficient.size.pLRT <- readRDS('coefficient.pLRT.value.RDS')
# Add text to the plot
.labs <- rownames(coefficient.size.pLRT)
# effect size between label2 vs 1
ggplot(coefficient.size.pLRT, aes(groupprogressor, -log10(pvalue))) +
  labs(x = 'Coefficient: nonprogressor vs progressor', y = '-log10(pvalue.LRT') +
  geom_point(position = position_jitter(width = 0.01, height = 0.01)) + 
  geom_hline(yintercept=-log10(0.05), linetype="dashed", color = "red", size=1) +
  #geom_vline(xintercept=0.8, linetype="dashed", color = "red", size=1) +
  geom_text_repel(aes(label = .labs), size = 2) +
  #scale_color_manual(values = c("#00AFBB", "#E7B800", "#FC4E07"))
  theme_classic()
ggsave(file.path(saved.dic, 'nonprogressor vs progressor coefficient.png'), height = 6, width = 6, dpi = 300)



t.value.size.pLRT <- readRDS('t.value.pLRT.value.RDS')
# Add text to the plot
.labs <- rownames(t.value.size.pLRT)
# effect size between label2 vs 1
ggplot(t.value.size.pLRT, aes(groupprogressor, -log10(pvalue))) +
  labs(x = 'T value: progressor vs nonprogressor', y = '-log10(pvalue.LRT') +
  geom_point(position = position_jitter(width = 0.01, height = 0.01)) + 
  geom_hline(yintercept=-log10(0.05), linetype="dashed", color = "red", size=1) +
  #geom_vline(xintercept=0.8, linetype="dashed", color = "red", size=1) +
  geom_text_repel(aes(label = .labs), size = 2) +
  #scale_color_manual(values = c("#00AFBB", "#E7B800", "#FC4E07"))
  theme_classic()
ggsave(file.path(saved.dic, 'nonprogressor vs progressor Tvalue.png'), height = 6, width = 6, dpi = 300)

```

Mutiple-testing-Correction
```{r}
library(ggplot2)
library(ggrepel)
# Set it globally:
options(ggrepel.max.overlaps = Inf)

t.value.size.pLRT <- readRDS('t.value.pLRT.value.RDS')
#Adjust the pvalue based on BH method.
pvalue.adjust <- p.adjust(t.value.size.pLRT$pvalue, method = 'BH')
t.value.size.pLRT$pvalue.adjust <- pvalue.adjust
saveRDS(t.value.size.pLRT, 't.value.pLRT.value.RDS')
# Add text to the plot
feature.labs <- rownames(t.value.size.pLRT)
# effect size between label2 vs 1
ggplot(t.value.size.pLRT, aes(groupprogressor, -log10(pvalue.adjust))) +
  labs(x = 'T value: progressor vs nonprogressor', y = '-log10(BH.adjused.pvalue.LRT)') +
  geom_point(position = position_jitter(width = 0.01, height = 0.01)) + 
  geom_hline(yintercept=-log10(0.05), linetype="dashed", color = "red", size=1) +
  #geom_vline(xintercept=0.8, linetype="dashed", color = "red", size=1) +
  geom_text_repel(aes(label = feature.labs), size = 2) +
  #scale_color_manual(values = c("#00AFBB", "#E7B800", "#FC4E07"))
  theme_classic()
ggsave(file.path(saved.dic, 'nonprogressor vs progressor Tvalue BH_correction_v2.png'), height = 6, width = 6, dpi = 300)
ggsave(file.path(saved.dic, 'nonprogressor vs progressor Tvalue BH_correction_v2.pdf'), height = 6, width = 6, dpi = 300, useDingbats=FALSE)

```


```{r}
library(ggplot2)
library(ggrepel)
# Set it globally:
options(ggrepel.max.overlaps = 20)

t.value.size.pLRT <- readRDS('t.value.pLRT.value.RDS')
#Adjust the pvalue based on BH method.
pvalue.adjust <- p.adjust(t.value.size.pLRT$pvalue, method = 'BH')
t.value.size.pLRT$pvalue.adjust <- pvalue.adjust

# Add text to the plot
.labs <- rownames(t.value.size.pLRT)
t.value.size.pLRT$feature_class <- rep("FcR", length = nrow(t.value.size.pLRT))
t.value.size.pLRT$feature_class[which(grepl("IgG|IgA|IgM", .labs))] <- "titer"
t.value.size.pLRT$feature_class[which(grepl("RCA|SNA", .labs))] <- "Lectin"
t.value.size.pLRT$feature_class[which(grepl("ADNP|ADCP", .labs))] <- "Function"
t.value.size.pLRT$feature_class <- factor(t.value.size.pLRT$feature_class)

t.value.size.pLRT$Epitope <- rep("PPD", length = nrow(t.value.size.pLRT))
t.value.size.pLRT$Epitope[which(grepl("_ESAT6", .labs))] <- "ESAT6"
t.value.size.pLRT$Epitope[which(grepl("_HspX", .labs))] <- "Hspx"
t.value.size.pLRT$Epitope[which(grepl("_CFP10", .labs))] <- "CFP10"
t.value.size.pLRT$Epitope[which(grepl("_Ag85", .labs))] <- "Ag85"
t.value.size.pLRT$Epitope[which(grepl("_PPD", .labs))] <- "PPD"
#t.value.size.pLRT$Epitope[which(grepl("_Tbad", .labs))] <- "Tbad"
t.value.size.pLRT$Epitope[which(grepl("_LAM", .labs))] <- "LAM"

# Add text to the plot
feature.labs <- rownames(t.value.size.pLRT)
# effect size between label2 vs 1
ggplot(t.value.size.pLRT, aes(groupprogressor, -log10(pvalue.adjust))) +
  labs(x = 'T value: progressor vs nonprogressor', y = '-log10(BH.adjused.pvalue.LRT)') +
  geom_point(aes(color = Epitope),position = position_jitter(width = 0.01, height = 0.01)) + 
  geom_hline(yintercept=-log10(0.05), linetype="dashed", color = "red", size=1) +
  #geom_vline(xintercept=0.8, linetype="dashed", color = "red", size=1) +
  geom_text_repel(aes(label = feature.labs), size = 2) +
  #scale_color_manual(values = c("#00AFBB", "#E7B800", "#FC4E07"))
  theme_classic()
ggsave(file.path(saved.dic, 'nonprogressor vs progressor Tvalue BH_correction_v3.png'), height = 6, width = 6, dpi = 300)
ggsave(file.path(saved.dic, 'nonprogressor vs progressor Tvalue BH_correction_v3.pdf'), height = 6, width = 6, dpi = 300, useDingbats=FALSE)


# effect size between label2 vs 1
ggplot(t.value.size.pLRT, aes(groupprogressor, -log10(pvalue.adjust))) +
  labs(x = 'T value: progressor vs nonprogressor', y = '-log10(BH.adjused.pvalue.LRT)') +
  geom_point(aes(color = feature_class),position = position_jitter(width = 0.01, height = 0.01)) + 
  geom_hline(yintercept=-log10(0.05), linetype="dashed", color = "red", size=1) +
  #geom_vline(xintercept=0.8, linetype="dashed", color = "red", size=1) +
  geom_text_repel(aes(label = feature.labs), size = 2) +
  #scale_color_manual(values = c("#00AFBB", "#E7B800", "#FC4E07"))
  theme_classic()
ggsave(file.path(saved.dic, 'nonprogressor vs progressor Tvalue BH_correction_v4.png'), height = 6, width = 6, dpi = 300)
ggsave(file.path(saved.dic, 'nonprogressor vs progressor Tvalue BH_correction_v4.pdf'), height = 6, width = 6, dpi = 300, useDingbats=FALSE)
```

