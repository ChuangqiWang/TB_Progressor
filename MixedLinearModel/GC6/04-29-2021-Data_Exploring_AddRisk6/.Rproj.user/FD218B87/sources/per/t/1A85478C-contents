---
title: "R Notebook"
output: html_notebook
---

Quantile Breaks
```{r}
library(RColorBrewer)
library(viridis)
quantile_breaks <- function(xs, n = 10) {
  breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
  breaks[!duplicated(breaks)]
}

```


install packages
```{r install package}
#install.packages("readxl")

library(ggplot2)
library(repr)
fig.size <- function(height, width) {
    options(repr.plot.height = height, repr.plot.width = width)
}

```

```{r color label}
# meta_colors <- list(
#   "group" = c(
#     "NA" = "gray", 
#     "progressor" = "#AD07E3",
#     "nonprogressor" = "#2166ac"
#     )
# )
``` 



```{r}
meta_colors <- list(
  "group" = c(
    "progressor" = "#fe9300",
    "nonprogressor" = "#009093"
    ),
  "group1" = c(
    "progressor" = "#fe9300",
    "nonprogressor" = "#009093"
    )
)
```



1. loading the raw data from progressors.functions.
```{r loading the dataset}
library("readxl")
folder.directory <- '../../0_Frozen_Dataset'
filename <- '20230323_GC6_datasheet_for_Chuangqi_CORRECTED_IgA1_v2.xlsx'

# Before reading data, we will return the names of the sheets for later use:
sheets.name <- excel_sheets(file.path(folder.directory, filename))
# xlsx files
progressors <- read_excel(file.path(folder.directory, filename), sheet = sheets.name[1])
progressors$IgG2_LAM <- as.numeric(progressors$IgG2_LAM)

meta.data <- as.data.frame(progressors[, 1:7])
SystemSerogy <- as.data.frame(progressors[, 8:dim(progressors)[2]])
```


```{r}
VisitDates <- read_excel(file.path(folder.directory, 'VisitDates_ForBoston.xlsx'))
colnames(VisitDates)[3] <- "Visit"
Date.index <- c()
for(index in 1 : dim(meta.data)[1])
{
  temp.index <- which(meta.data[index, ]$Ragon_ID == VisitDates$Ragon_ID)
  Date.index <- c(Date.index, temp.index)
}
VisitDates.ordered <- VisitDates[Date.index, ]

meta.data$VisitDate.v2 <- VisitDates.ordered$VisitDate
meta.data$VisitType <- VisitDates.ordered$Visit
```


```{r Miss information in TimetoTB_ForBoston.xlsx}
# TimetoTB <- read_excel(file.path(folder.directory, 'TimetoTB_ForBoston.xlsx'))
# 
# Date.index <- c()
# for(index in 1 : dim(meta.data)[1])
# {
#   temp.index <- which(meta.data[index, ]$Ragon_ID == TimetoTB$Ragon_ID)
#   Date.index <- c(Date.index, temp.index)
# }
# TimetoTB.ordered <- TimetoTB[Date.index, ]
# 
# meta.data$VisitType <- TimetoTB.ordered$Visit
```

Calculate the Age
```{r}
options(digits=2)
library(lubridate)
Age <- c()
for(index in 1 : dim(meta.data)[1]){
  temp.Age <- time_length(interval(as.Date(meta.data[index, ]$DOB, format='%d/%m/%Y'), 
                                   as.Date(meta.data[index, ]$VisitDate, format='%d/%m/%Y')),   
                          "years")
  Age <- c(Age, temp.Age)
}
meta.data$Age <- Age
```

2. loadig the Risk6 score
```{r}
filename <- 'RISK6_supplementary_Excel_file14Jan2020.xlsx'

# Before reading data, we will return the names of the sheets for later use:
sheets.name <- excel_sheets(file.path(folder.directory, filename))
# xlsx files
GC6_7_Risk6 <- read_excel(file.path(folder.directory, filename), sheet = sheets.name[6]) #GC6-7 Cohort
colnames(GC6_7_Risk6) <- GC6_7_Risk6[2, ]
GC6_7_Risk6 <- GC6_7_Risk6[3:476, ]
temp.index <- which(GC6_7_Risk6$TB_STATUS == "Control")
GC6_7_Risk6[temp.index, ]$TB_STATUS <- "nonprogressor"
```
#Match the Serology Dataset with Risk6
```{r}
order.index <- c()
order.index.Sero <- c()
x <- 0
for(index in 1 : dim(meta.data)[1]){
  temp.index <- which(as.character(meta.data[index, ]$ID) == GC6_7_Risk6$PID & meta.data[index, ]$VisitType == GC6_7_Risk6$time.from.exposure)
  #print(temp.index)
  if(length(temp.index) == 1){
    order.index <- c(order.index, temp.index)
    order.index.Sero <- c(order.index.Sero, index)
  }
}

paired.GC6_7_Risk6 <- GC6_7_Risk6[order.index, ]
paired.meta.data <- meta.data[order.index.Sero, ]
paired.SystemSerology <- SystemSerogy[order.index.Sero, ]
saveRDS(paired.GC6_7_Risk6, "paired_GC6_7_Risk6.RDS")
saveRDS(paired.meta.data, "paired.meta.data.RDS")
saveRDS(paired.SystemSerology, "paired.SystemSerology.RDS")


SystemSerogy$Risk6 <- NA
SystemSerogy[order.index.Sero, ]$Risk6 <- as.numeric(GC6_7_Risk6[order.index, ]$RISK6_SCORE)
```

#Organize the dataset.
```{r}
meta.data$ID <- as.character(meta.data$ID)
meta.data$Ragon_ID <- meta.data$Ragon_ID
meta.data$ID <- factor(meta.data$ID)
meta.data$group <- factor(meta.data$group, levels = c("nonprogressor", "progressor"))
meta.data$timetoTB <- as.numeric(meta.data$timetoTB)
meta.data$VisitType <- factor(meta.data$VisitType, levels = c("BL", "M6", "M18"))
meta.data$VisitDate <- as.Date(meta.data$VisitDate, format = '%d/%m/%Y')
meta.data$DOB <- as.Date(meta.data$DOB, format = '%d/%m/%Y')


# timetoTB.month <- c()
# for(index in 1 : dim(meta.data)[1]){
#   temp.time <- meta.data[index, ]$timetoTB
#   Year.Month <- unlist(strsplit(temp.time, split = " ", fixed = TRUE))
#   Month <- as.numeric(gsub("([0-9]+).*$", "\\1", Year.Month))
#   if(length(Month) == 2)
#     Month <- Month[1] * 12 + Month[2]
#   else
#     Month <- Month
#   timetoTB.month <- c(timetoTB.month, Month)
# }
# meta.data$timetoTB.month <- timetoTB.month
```



```{r}
ID.group.table <- table(meta.data[, c(2, 3)])
ID.df <- data.frame(ID = rownames(ID.group.table))
group <- array(" ", dim = dim(ID.df)[1])
num.samples <- array(0, dim = dim(ID.df)[1])
for(index in 1 : dim(ID.df)[1]){
  temp.table <- ID.group.table[index, ]
  if(temp.table[1] > 0){
    group[index] <- 'nonprogressor'
    num.samples[index] <- temp.table[1]
  }else{
    group[index] <- 'progressor'
    num.samples[index] <- temp.table[2]
  }
}
ID.df$group <- factor(group, levels = c("nonprogressor", "progressor"))
ID.df$num.samples <- num.samples
```

```{r}
#Create a folder to save the results.
results.folder <- './results.adding'
if (!dir.exists(results.folder)){
  dir.create((results.folder))
}

rownames(meta.data) <- meta.data$Ragon_ID
rownames(SystemSerogy) <- meta.data$Ragon_ID
saveRDS(meta.data, file.path(results.folder, 'meta.data.RDS'))
saveRDS(SystemSerogy, file.path(results.folder, 'SystemSerogy.RDS'))
saveRDS(ID.df, file.path(results.folder, 'ID.df.RDS'))
```

```{r}
# load the library
library(forcats)
library(ggplot2)

ID.df$ID <- factor(ID.df$ID, levels = ID.df$ID[order(ID.df$group)])


# Basic barplot
ggplot(data=ID.df, aes(x=ID, y=num.samples, fill = group)) +
  geom_bar(stat="identity") +
  theme_classic(base_size = 8) +
  scale_fill_manual(values = meta_colors$group) +
  theme(axis.text.x = element_text(angle = 90))
ggsave(file.path(results.folder, "Sample.Frequency.png"), width = 12, height = 3)

df.table <- table(ID.df$group)
df.group <- as.data.frame(df.table)
ggplot(data=df.group, aes(x = Var1, y = Freq)) +
  geom_bar(stat="identity") +
  geom_text(aes(label=Freq), vjust=1.6, color="white", size=5.5)+
  theme_classic(base_size = 10)
ggsave(file.path(results.folder, "Group.Frequency.png"), width = 3, height = 3)

#Age distribution
#using plyr to produce means for each type
library(plyr)
means <- ddply(meta.data, "group", summarise, rating.mean = mean(Age))

ggplot(meta.data, aes(x = Age, fill = group)) +
  geom_histogram(binwidth = 0.5, colour = "gray", size = 0.1, alpha = 0.5, position = "identity") +
  #geom_density() +
  geom_density(alpha = .3) + #alpha used for filling the density
  #geom_vline(aes(xintercept = mean(Age, na.rm = T)),
  #           colour = "red", linetype ="longdash", size = .8) +
  geom_vline(data = means, aes(xintercept = rating.mean, colour = group),
             linetype = "longdash", size=1) +
  scale_color_manual(values = meta_colors$group) +
  scale_fill_manual(values = meta_colors$group) +
  theme_classic(base_size = 10)
ggsave(file.path(results.folder, "Age.png"), width = 5, height = 3)
```

```{r}
library(pheatmap)
library(DMwR2)
annotation_row <- data.frame(group = meta.data$group, ID = meta.data$ID, timetoTB = meta.data$timetoTB)
rownames(annotation_row) <- meta.data$Ragon_ID

ordered_index <- order(annotation_row$group, annotation_row$ID, annotation_row$timetoTB)
annotation_row_ordered <- annotation_row[ordered_index, ]


SystemSerogy.ordered <- scale(as.matrix(SystemSerogy[ordered_index, 1:78]), center = TRUE, scale = TRUE)
#SystemSerogy.ordered <- knnImputation(SystemSerogy.ordered, k = 10)
mat_breaks <- quantile_breaks(na.omit(unlist(SystemSerogy[, 1:78])), n = 100)
png(file.path(results.folder, "SerologyData_V3.png"), width=3560, height=3560, res = 300)
pheatmap(
    mat = SystemSerogy.ordered,
    border_color = NA,
    color = colorRampPalette(rev(brewer.pal(n = 8, name = "RdYlBu")))(100), #(length(mat_breaks) - 1),
    #color = inferno(length(mat_breaks) - 1),
    #breaks = mat_breaks,
    show_rownames = FALSE,
    show_colnames = TRUE,
    cluster_rows = FALSE,
    cluster_cols = FALSE,
    annotation_row = annotation_row_ordered,
    annotation_colors = meta_colors,
    fontsize = 6,
    fontsize_col = 5,
    fontsize_row = 5,
    scale = "none",
    main  = "Serology Data with Quantile Color Scale"
)
dev.off()
```